{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global[\"fast-equals\"] = {}));\n})(this, function (exports) {\n  'use strict';\n  /**\r\n   * Default equality comparator pass-through, used as the standard `isEqual` creator for\r\n   * use inside the built comparator.\r\n   */\n\n  function createDefaultIsNestedEqual(comparator) {\n    return function isEqual(a, b, _indexOrKeyA, _indexOrKeyB, _parentA, _parentB, meta) {\n      return comparator(a, b, meta);\n    };\n  }\n  /**\r\n   * Wrap the provided `areItemsEqual` method to manage the circular cache, allowing\r\n   * for circular references to be safely included in the comparison without creating\r\n   * stack overflows.\r\n   */\n\n\n  function createIsCircular(areItemsEqual) {\n    return function isCircular(a, b, isEqual, cache) {\n      if (!a || !b || typeof a !== 'object' || typeof b !== 'object') {\n        return areItemsEqual(a, b, isEqual, cache);\n      }\n\n      var cachedA = cache.get(a);\n      var cachedB = cache.get(b);\n\n      if (cachedA && cachedB) {\n        return cachedA === b && cachedB === a;\n      }\n\n      cache.set(a, b);\n      cache.set(b, a);\n      var result = areItemsEqual(a, b, isEqual, cache);\n      cache.delete(a);\n      cache.delete(b);\n      return result;\n    };\n  }\n  /**\r\n   * Targeted shallow merge of two objects.\r\n   *\r\n   * @NOTE\r\n   * This exists as a tinier compiled version of the `__assign` helper that\r\n   * `tsc` injects in case of `Object.assign` not being present.\r\n   */\n\n\n  function merge(a, b) {\n    var merged = {};\n\n    for (var key in a) {\n      merged[key] = a[key];\n    }\n\n    for (var key in b) {\n      merged[key] = b[key];\n    }\n\n    return merged;\n  }\n  /**\r\n   * Whether the value is a plain object.\r\n   *\r\n   * @NOTE\r\n   * This is a same-realm compariosn only.\r\n   */\n\n\n  function isPlainObject(value) {\n    return value.constructor === Object || value.constructor == null;\n  }\n  /**\r\n   * When the value is `Promise`-like, aka \"then-able\".\r\n   */\n\n\n  function isPromiseLike(value) {\n    return typeof value.then === 'function';\n  }\n  /**\r\n   * Whether the values passed are strictly equal or both NaN.\r\n   */\n\n\n  function sameValueZeroEqual(a, b) {\n    return a === b || a !== a && b !== b;\n  }\n\n  var ARGUMENTS_TAG = '[object Arguments]';\n  var BOOLEAN_TAG = '[object Boolean]';\n  var DATE_TAG = '[object Date]';\n  var REG_EXP_TAG = '[object RegExp]';\n  var MAP_TAG = '[object Map]';\n  var NUMBER_TAG = '[object Number]';\n  var OBJECT_TAG = '[object Object]';\n  var SET_TAG = '[object Set]';\n  var STRING_TAG = '[object String]';\n  var toString = Object.prototype.toString;\n\n  function createComparator(_a) {\n    var areArraysEqual = _a.areArraysEqual,\n        areDatesEqual = _a.areDatesEqual,\n        areMapsEqual = _a.areMapsEqual,\n        areObjectsEqual = _a.areObjectsEqual,\n        areRegExpsEqual = _a.areRegExpsEqual,\n        areSetsEqual = _a.areSetsEqual,\n        createIsNestedEqual = _a.createIsNestedEqual;\n    var isEqual = createIsNestedEqual(comparator);\n    /**\r\n     * compare the value of the two objects and return true if they are equivalent in values\r\n     */\n\n    function comparator(a, b, meta) {\n      // If the items are strictly equal, no need to do a value comparison.\n      if (a === b) {\n        return true;\n      } // If the items are not non-nullish objects, then the only possibility\n      // of them being equal but not strictly is if they are both `NaN`. Since\n      // `NaN` is uniquely not equal to itself, we can use self-comparison of\n      // both objects, which is faster than `isNaN()`.\n\n\n      if (!a || !b || typeof a !== 'object' || typeof b !== 'object') {\n        return a !== a && b !== b;\n      } // Checks are listed in order of commonality of use-case:\n      //   1. Common complex object types (plain object, array)\n      //   2. Common data values (date, regexp)\n      //   3. Less-common complex object types (map, set)\n      //   4. Less-common data values (promise, primitive wrappers)\n      // Inherently this is both subjective and assumptive, however\n      // when reviewing comparable libraries in the wild this order\n      // appears to be generally consistent.\n      // `isPlainObject` only checks against the object's own realm. Cross-realm\n      // comparisons are rare, and will be handled in the ultimate fallback, so\n      // we can avoid the `toString.call()` cost unless necessary.\n\n\n      if (isPlainObject(a) && isPlainObject(b)) {\n        return areObjectsEqual(a, b, isEqual, meta);\n      } // `isArray()` works on subclasses and is cross-realm, so we can again avoid\n      // the `toString.call()` cost unless necessary by just checking if either\n      // and then both are arrays.\n\n\n      var aArray = Array.isArray(a);\n      var bArray = Array.isArray(b);\n\n      if (aArray || bArray) {\n        return aArray === bArray && areArraysEqual(a, b, isEqual, meta);\n      } // Since this is a custom object, use the classic `toString.call()` to get its\n      // type. This is reasonably performant in modern environments like v8 and\n      // SpiderMonkey, and allows for cross-realm comparison when other checks like\n      // `instanceof` do not.\n\n\n      var aTag = toString.call(a);\n\n      if (aTag !== toString.call(b)) {\n        return false;\n      }\n\n      if (aTag === DATE_TAG) {\n        // `getTime()` showed better results compared to alternatives like `valueOf()`\n        // or the unary `+` operator.\n        return areDatesEqual(a, b, isEqual, meta);\n      }\n\n      if (aTag === REG_EXP_TAG) {\n        return areRegExpsEqual(a, b, isEqual, meta);\n      }\n\n      if (aTag === MAP_TAG) {\n        return areMapsEqual(a, b, isEqual, meta);\n      }\n\n      if (aTag === SET_TAG) {\n        return areSetsEqual(a, b, isEqual, meta);\n      } // If a simple object tag, then we can prioritize a simple object comparison because\n      // it is likely a custom class. If an arguments tag, it should be treated as a standard\n      // object.\n\n\n      if (aTag === OBJECT_TAG || aTag === ARGUMENTS_TAG) {\n        // The exception for value comparison is `Promise`-like contracts. These should be\n        // treated the same as standard `Promise` objects, which means strict equality.\n        return isPromiseLike(a) || isPromiseLike(b) ? false : areObjectsEqual(a, b, isEqual, meta);\n      } // As the penultimate fallback, check if the values passed are primitive wrappers. This\n      // is very rare in modern JS, which is why it is deprioritized compared to all other object\n      // types.\n\n\n      if (aTag === BOOLEAN_TAG || aTag === NUMBER_TAG || aTag === STRING_TAG) {\n        return sameValueZeroEqual(a.valueOf(), b.valueOf());\n      } // If not matching any tags that require a specific type of comparison, then we hard-code false because\n      // the only thing remaining is strict equality, which has already been compared. This is for a few reasons:\n      //   - Certain types that cannot be introspected (e.g., `WeakMap`). For these types, this is the only\n      //     comparison that can be made.\n      //   - For types that can be introspected, but rarely have requirements to be compared\n      //     (`ArrayBuffer`, `DataView`, etc.), the cost is avoided to prioritize the common\n      //     use-cases (may be included in a future release, if requested enough).\n      //   - For types that can be introspected but do not have an objective definition of what\n      //     equality is (`Error`, etc.), the subjective decision is to be conservative and strictly compare.\n      // In all cases, these decisions should be reevaluated based on changes to the language and\n      // common development practices.\n\n\n      return false;\n    }\n\n    return comparator;\n  }\n  /**\r\n   * Whether the arrays are equal in value.\r\n   */\n\n\n  function areArraysEqual(a, b, isEqual, meta) {\n    var index = a.length;\n\n    if (b.length !== index) {\n      return false;\n    } // Decrementing `while` showed faster results than either incrementing or\n    // decrementing `for` loop and than an incrementing `while` loop. Declarative\n    // methods like `some` / `every` were not used to avoid incurring the garbage\n    // cost of anonymous callbacks.\n\n\n    while (index-- > 0) {\n      if (!isEqual(a[index], b[index], index, index, a, b, meta)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /**\r\n   * Whether the arrays are equal in value, including circular references.\r\n   */\n\n\n  var areArraysEqualCircular = createIsCircular(areArraysEqual);\n  /**\r\n   * Whether the dates passed are equal in value.\r\n   *\r\n   * @NOTE\r\n   * This is a standalone function instead of done inline in the comparator\r\n   * to allow for overrides.\r\n   */\n\n  function areDatesEqual(a, b) {\n    return sameValueZeroEqual(a.valueOf(), b.valueOf());\n  }\n  /**\r\n   * Whether the `Map`s are equal in value.\r\n   */\n\n\n  function areMapsEqual(a, b, isEqual, meta) {\n    var isValueEqual = a.size === b.size;\n\n    if (!isValueEqual) {\n      return false;\n    }\n\n    if (!a.size) {\n      return true;\n    } // The use of `forEach()` is to avoid the transpilation cost of `for...of` comparisons, and\n    // the inability to control the performance of the resulting code. It also avoids excessive\n    // iteration compared to doing comparisons of `keys()` and `values()`. As a result, though,\n    // we cannot short-circuit the iterations; bookkeeping must be done to short-circuit the\n    // equality checks themselves.\n\n\n    var matchedIndices = {};\n    var indexA = 0;\n    a.forEach(function (aValue, aKey) {\n      if (!isValueEqual) {\n        return;\n      }\n\n      var hasMatch = false;\n      var matchIndexB = 0;\n      b.forEach(function (bValue, bKey) {\n        if (!hasMatch && !matchedIndices[matchIndexB] && (hasMatch = isEqual(aKey, bKey, indexA, matchIndexB, a, b, meta) && isEqual(aValue, bValue, aKey, bKey, a, b, meta))) {\n          matchedIndices[matchIndexB] = true;\n        }\n\n        matchIndexB++;\n      });\n      indexA++;\n      isValueEqual = hasMatch;\n    });\n    return isValueEqual;\n  }\n  /**\r\n   * Whether the `Map`s are equal in value, including circular references.\r\n   */\n\n\n  var areMapsEqualCircular = createIsCircular(areMapsEqual);\n  var OWNER = '_owner';\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n  /**\r\n   * Whether the objects are equal in value.\r\n   */\n\n  function areObjectsEqual(a, b, isEqual, meta) {\n    var keysA = Object.keys(a);\n    var index = keysA.length;\n\n    if (Object.keys(b).length !== index) {\n      return false;\n    }\n\n    var key; // Decrementing `while` showed faster results than either incrementing or\n    // decrementing `for` loop and than an incrementing `while` loop. Declarative\n    // methods like `some` / `every` were not used to avoid incurring the garbage\n    // cost of anonymous callbacks.\n\n    while (index-- > 0) {\n      key = keysA[index];\n\n      if (key === OWNER) {\n        var reactElementA = !!a.$$typeof;\n        var reactElementB = !!b.$$typeof;\n\n        if ((reactElementA || reactElementB) && reactElementA !== reactElementB) {\n          return false;\n        }\n      }\n\n      if (!hasOwnProperty.call(b, key) || !isEqual(a[key], b[key], key, key, a, b, meta)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /**\r\n   * Whether the objects are equal in value, including circular references.\r\n   */\n\n\n  var areObjectsEqualCircular = createIsCircular(areObjectsEqual);\n  /**\r\n   * Whether the regexps passed are equal in value.\r\n   *\r\n   * @NOTE\r\n   * This is a standalone function instead of done inline in the comparator\r\n   * to allow for overrides. An example of this would be supporting a\r\n   * pre-ES2015 environment where the `flags` property is not available.\r\n   */\n\n  function areRegExpsEqual(a, b) {\n    return a.source === b.source && a.flags === b.flags;\n  }\n  /**\r\n   * Whether the `Set`s are equal in value.\r\n   */\n\n\n  function areSetsEqual(a, b, isEqual, meta) {\n    var isValueEqual = a.size === b.size;\n\n    if (!isValueEqual) {\n      return false;\n    }\n\n    if (!a.size) {\n      return true;\n    } // The use of `forEach()` is to avoid the transpilation cost of `for...of` comparisons, and\n    // the inability to control the performance of the resulting code. It also avoids excessive\n    // iteration compared to doing comparisons of `keys()` and `values()`. As a result, though,\n    // we cannot short-circuit the iterations; bookkeeping must be done to short-circuit the\n    // equality checks themselves.\n\n\n    var matchedIndices = {};\n    a.forEach(function (aValue, aKey) {\n      if (!isValueEqual) {\n        return;\n      }\n\n      var hasMatch = false;\n      var matchIndex = 0;\n      b.forEach(function (bValue, bKey) {\n        if (!hasMatch && !matchedIndices[matchIndex] && (hasMatch = isEqual(aValue, bValue, aKey, bKey, a, b, meta))) {\n          matchedIndices[matchIndex] = true;\n        }\n\n        matchIndex++;\n      });\n      isValueEqual = hasMatch;\n    });\n    return isValueEqual;\n  }\n  /**\r\n   * Whether the `Set`s are equal in value, including circular references.\r\n   */\n\n\n  var areSetsEqualCircular = createIsCircular(areSetsEqual);\n  var DEFAULT_CONFIG = Object.freeze({\n    areArraysEqual: areArraysEqual,\n    areDatesEqual: areDatesEqual,\n    areMapsEqual: areMapsEqual,\n    areObjectsEqual: areObjectsEqual,\n    areRegExpsEqual: areRegExpsEqual,\n    areSetsEqual: areSetsEqual,\n    createIsNestedEqual: createDefaultIsNestedEqual\n  });\n  var DEFAULT_CIRCULAR_CONFIG = Object.freeze({\n    areArraysEqual: areArraysEqualCircular,\n    areDatesEqual: areDatesEqual,\n    areMapsEqual: areMapsEqualCircular,\n    areObjectsEqual: areObjectsEqualCircular,\n    areRegExpsEqual: areRegExpsEqual,\n    areSetsEqual: areSetsEqualCircular,\n    createIsNestedEqual: createDefaultIsNestedEqual\n  });\n  var isDeepEqual = createComparator(DEFAULT_CONFIG);\n  /**\r\n   * Whether the items passed are deeply-equal in value.\r\n   */\n\n  function deepEqual(a, b) {\n    return isDeepEqual(a, b, undefined);\n  }\n\n  var isShallowEqual = createComparator(merge(DEFAULT_CONFIG, {\n    createIsNestedEqual: function () {\n      return sameValueZeroEqual;\n    }\n  }));\n  /**\r\n   * Whether the items passed are shallowly-equal in value.\r\n   */\n\n  function shallowEqual(a, b) {\n    return isShallowEqual(a, b, undefined);\n  }\n\n  var isCircularDeepEqual = createComparator(DEFAULT_CIRCULAR_CONFIG);\n  /**\r\n   * Whether the items passed are deeply-equal in value, including circular references.\r\n   */\n\n  function circularDeepEqual(a, b) {\n    return isCircularDeepEqual(a, b, new WeakMap());\n  }\n\n  var isCircularShallowEqual = createComparator(merge(DEFAULT_CIRCULAR_CONFIG, {\n    createIsNestedEqual: function () {\n      return sameValueZeroEqual;\n    }\n  }));\n  /**\r\n   * Whether the items passed are shallowly-equal in value, including circular references.\r\n   */\n\n  function circularShallowEqual(a, b) {\n    return isCircularShallowEqual(a, b, new WeakMap());\n  }\n  /**\r\n   * Create a custom equality comparison method.\r\n   *\r\n   * This can be done to create very targeted comparisons in extreme hot-path scenarios\r\n   * where the standard methods are not performant enough, but can also be used to provide\r\n   * support for legacy environments that do not support expected features like\r\n   * `RegExp.prototype.flags` out of the box.\r\n   */\n\n\n  function createCustomEqual(getComparatorOptions) {\n    return createComparator(merge(DEFAULT_CONFIG, getComparatorOptions(DEFAULT_CONFIG)));\n  }\n  /**\r\n   * Create a custom equality comparison method that handles circular references. This is very\r\n   * similar to `createCustomEqual`, with the only difference being that `meta` expects to be\r\n   * populated with a `WeakMap`-like contract.\r\n   *\r\n   * This can be done to create very targeted comparisons in extreme hot-path scenarios\r\n   * where the standard methods are not performant enough, but can also be used to provide\r\n   * support for legacy environments that do not support expected features like\r\n   * `WeakMap` out of the box.\r\n   */\n\n\n  function createCustomCircularEqual(getComparatorOptions) {\n    var comparator = createComparator(merge(DEFAULT_CIRCULAR_CONFIG, getComparatorOptions(DEFAULT_CIRCULAR_CONFIG)));\n    return function (a, b, meta) {\n      if (meta === void 0) {\n        meta = new WeakMap();\n      }\n\n      return comparator(a, b, meta);\n    };\n  }\n\n  exports.circularDeepEqual = circularDeepEqual;\n  exports.circularShallowEqual = circularShallowEqual;\n  exports.createCustomCircularEqual = createCustomCircularEqual;\n  exports.createCustomEqual = createCustomEqual;\n  exports.deepEqual = deepEqual;\n  exports.sameValueZeroEqual = sameValueZeroEqual;\n  exports.shallowEqual = shallowEqual;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":{"version":3,"sources":["../src/utils.ts","../src/comparator.ts","../src/arrays.ts","../src/dates.ts","../src/maps.ts","../src/objects.ts","../src/regexps.ts","../src/sets.ts","../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  EqualityComparator,\n  InternalEqualityComparator,\n  TypeEqualityComparator,\n} from '../index.d';\n\n/**\n * Default equality comparator pass-through, used as the standard `isEqual` creator for\n * use inside the built comparator.\n */\nexport function createDefaultIsNestedEqual<Meta>(\n  comparator: EqualityComparator<Meta>,\n): InternalEqualityComparator<Meta> {\n  return function isEqual<A, B>(\n    a: A,\n    b: B,\n    _indexOrKeyA: any,\n    _indexOrKeyB: any,\n    _parentA: any,\n    _parentB: any,\n    meta: Meta,\n  ) {\n    return comparator(a, b, meta);\n  };\n}\n\n/**\n * Wrap the provided `areItemsEqual` method to manage the circular cache, allowing\n * for circular references to be safely included in the comparison without creating\n * stack overflows.\n */\nexport function createIsCircular<\n  AreItemsEqual extends TypeEqualityComparator<any, any>,\n>(areItemsEqual: AreItemsEqual): AreItemsEqual {\n  return function isCircular(\n    a: any,\n    b: any,\n    isEqual: InternalEqualityComparator<WeakMap<any, any>>,\n    cache: WeakMap<any, any>,\n  ) {\n    if (!a || !b || typeof a !== 'object' || typeof b !== 'object') {\n      return areItemsEqual(a, b, isEqual, cache);\n    }\n\n    const cachedA = cache.get(a);\n    const cachedB = cache.get(b);\n\n    if (cachedA && cachedB) {\n      return cachedA === b && cachedB === a;\n    }\n\n    cache.set(a, b);\n    cache.set(b, a);\n\n    const result = areItemsEqual(a, b, isEqual, cache);\n\n    cache.delete(a);\n    cache.delete(b);\n\n    return result;\n  } as AreItemsEqual;\n}\n\n/**\n * Targeted shallow merge of two objects.\n *\n * @NOTE\n * This exists as a tinier compiled version of the `__assign` helper that\n * `tsc` injects in case of `Object.assign` not being present.\n */\nexport function merge<A extends object, B extends object>(a: A, b: B): A & B {\n  const merged: Record<string, any> = {};\n\n  for (const key in a) {\n    merged[key] = a[key];\n  }\n\n  for (const key in b) {\n    merged[key] = b[key];\n  }\n\n  return merged as A & B;\n}\n\n/**\n * Whether the value is a plain object.\n *\n * @NOTE\n * This is a same-realm compariosn only.\n */\nexport function isPlainObject(value: any): boolean {\n  return value.constructor === Object || value.constructor == null;\n}\n\n/**\n * When the value is `Promise`-like, aka \"then-able\".\n */\nexport function isPromiseLike(value: any): boolean {\n  return typeof value.then === 'function';\n}\n\n/**\n * Whether the values passed are strictly equal or both NaN.\n */\nexport function sameValueZeroEqual(a: any, b: any): boolean {\n  return a === b || (a !== a && b !== b);\n}\n","import { isPlainObject, isPromiseLike, sameValueZeroEqual } from './utils';\n\nimport type {\n  CreateComparatorCreatorOptions,\n  EqualityComparator,\n} from '../index.d';\n\nconst ARGUMENTS_TAG = '[object Arguments]';\nconst BOOLEAN_TAG = '[object Boolean]';\nconst DATE_TAG = '[object Date]';\nconst REG_EXP_TAG = '[object RegExp]';\nconst MAP_TAG = '[object Map]';\nconst NUMBER_TAG = '[object Number]';\nconst OBJECT_TAG = '[object Object]';\nconst SET_TAG = '[object Set]';\nconst STRING_TAG = '[object String]';\n\nconst { toString } = Object.prototype;\n\nexport function createComparator<Meta>({\n  areArraysEqual,\n  areDatesEqual,\n  areMapsEqual,\n  areObjectsEqual,\n  areRegExpsEqual,\n  areSetsEqual,\n  createIsNestedEqual,\n}: CreateComparatorCreatorOptions<Meta>): EqualityComparator<Meta> {\n  const isEqual = createIsNestedEqual(comparator as EqualityComparator<Meta>);\n\n  /**\n   * compare the value of the two objects and return true if they are equivalent in values\n   */\n  function comparator(a: any, b: any, meta: Meta): boolean {\n    // If the items are strictly equal, no need to do a value comparison.\n    if (a === b) {\n      return true;\n    }\n\n    // If the items are not non-nullish objects, then the only possibility\n    // of them being equal but not strictly is if they are both `NaN`. Since\n    // `NaN` is uniquely not equal to itself, we can use self-comparison of\n    // both objects, which is faster than `isNaN()`.\n    if (!a || !b || typeof a !== 'object' || typeof b !== 'object') {\n      return a !== a && b !== b;\n    }\n\n    // Checks are listed in order of commonality of use-case:\n    //   1. Common complex object types (plain object, array)\n    //   2. Common data values (date, regexp)\n    //   3. Less-common complex object types (map, set)\n    //   4. Less-common data values (promise, primitive wrappers)\n    // Inherently this is both subjective and assumptive, however\n    // when reviewing comparable libraries in the wild this order\n    // appears to be generally consistent.\n\n    // `isPlainObject` only checks against the object's own realm. Cross-realm\n    // comparisons are rare, and will be handled in the ultimate fallback, so\n    // we can avoid the `toString.call()` cost unless necessary.\n    if (isPlainObject(a) && isPlainObject(b)) {\n      return areObjectsEqual(a, b, isEqual, meta);\n    }\n\n    // `isArray()` works on subclasses and is cross-realm, so we can again avoid\n    // the `toString.call()` cost unless necessary by just checking if either\n    // and then both are arrays.\n    const aArray = Array.isArray(a);\n    const bArray = Array.isArray(b);\n\n    if (aArray || bArray) {\n      return aArray === bArray && areArraysEqual(a, b, isEqual, meta);\n    }\n\n    // Since this is a custom object, use the classic `toString.call()` to get its\n    // type. This is reasonably performant in modern environments like v8 and\n    // SpiderMonkey, and allows for cross-realm comparison when other checks like\n    // `instanceof` do not.\n    const aTag = toString.call(a);\n\n    if (aTag !== toString.call(b)) {\n      return false;\n    }\n\n    if (aTag === DATE_TAG) {\n      // `getTime()` showed better results compared to alternatives like `valueOf()`\n      // or the unary `+` operator.\n      return areDatesEqual(a, b, isEqual, meta);\n    }\n\n    if (aTag === REG_EXP_TAG) {\n      return areRegExpsEqual(a, b, isEqual, meta);\n    }\n\n    if (aTag === MAP_TAG) {\n      return areMapsEqual(a, b, isEqual, meta);\n    }\n\n    if (aTag === SET_TAG) {\n      return areSetsEqual(a, b, isEqual, meta);\n    }\n\n    // If a simple object tag, then we can prioritize a simple object comparison because\n    // it is likely a custom class. If an arguments tag, it should be treated as a standard\n    // object.\n    if (aTag === OBJECT_TAG || aTag === ARGUMENTS_TAG) {\n      // The exception for value comparison is `Promise`-like contracts. These should be\n      // treated the same as standard `Promise` objects, which means strict equality.\n      return isPromiseLike(a) || isPromiseLike(b)\n        ? false\n        : areObjectsEqual(a, b, isEqual, meta);\n    }\n\n    // As the penultimate fallback, check if the values passed are primitive wrappers. This\n    // is very rare in modern JS, which is why it is deprioritized compared to all other object\n    // types.\n    if (aTag === BOOLEAN_TAG || aTag === NUMBER_TAG || aTag === STRING_TAG) {\n      return sameValueZeroEqual(a.valueOf(), b.valueOf());\n    }\n\n    // If not matching any tags that require a specific type of comparison, then we hard-code false because\n    // the only thing remaining is strict equality, which has already been compared. This is for a few reasons:\n    //   - Certain types that cannot be introspected (e.g., `WeakMap`). For these types, this is the only\n    //     comparison that can be made.\n    //   - For types that can be introspected, but rarely have requirements to be compared\n    //     (`ArrayBuffer`, `DataView`, etc.), the cost is avoided to prioritize the common\n    //     use-cases (may be included in a future release, if requested enough).\n    //   - For types that can be introspected but do not have an objective definition of what\n    //     equality is (`Error`, etc.), the subjective decision is to be conservative and strictly compare.\n    // In all cases, these decisions should be reevaluated based on changes to the language and\n    // common development practices.\n    return false;\n  }\n\n  return comparator as EqualityComparator<Meta>;\n}\n","import { createIsCircular } from './utils';\n\nimport type { InternalEqualityComparator } from '../index.d';\n\n/**\n * Whether the arrays are equal in value.\n */\nexport function areArraysEqual(\n  a: any[],\n  b: any[],\n  isEqual: InternalEqualityComparator<any>,\n  meta: any,\n): boolean {\n  let index = a.length;\n\n  if (b.length !== index) {\n    return false;\n  }\n\n  // Decrementing `while` showed faster results than either incrementing or\n  // decrementing `for` loop and than an incrementing `while` loop. Declarative\n  // methods like `some` / `every` were not used to avoid incurring the garbage\n  // cost of anonymous callbacks.\n  while (index-- > 0) {\n    if (!isEqual(a[index], b[index], index, index, a, b, meta)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Whether the arrays are equal in value, including circular references.\n */\nexport const areArraysEqualCircular = createIsCircular(areArraysEqual);\n","import { sameValueZeroEqual } from './utils';\n\n/**\n * Whether the dates passed are equal in value.\n *\n * @NOTE\n * This is a standalone function instead of done inline in the comparator\n * to allow for overrides.\n */\nexport function areDatesEqual(a: Date, b: Date): boolean {\n  return sameValueZeroEqual(a.valueOf(), b.valueOf());\n}\n","import { createIsCircular } from './utils';\n\nimport type { InternalEqualityComparator } from '../index.d';\n\n/**\n * Whether the `Map`s are equal in value.\n */\nexport function areMapsEqual(\n  a: Map<any, any>,\n  b: Map<any, any>,\n  isEqual: InternalEqualityComparator<any>,\n  meta: any,\n): boolean {\n  let isValueEqual = a.size === b.size;\n\n  if (!isValueEqual) {\n    return false;\n  }\n\n  if (!a.size) {\n    return true;\n  }\n\n  // The use of `forEach()` is to avoid the transpilation cost of `for...of` comparisons, and\n  // the inability to control the performance of the resulting code. It also avoids excessive\n  // iteration compared to doing comparisons of `keys()` and `values()`. As a result, though,\n  // we cannot short-circuit the iterations; bookkeeping must be done to short-circuit the\n  // equality checks themselves.\n\n  const matchedIndices: Record<number, true> = {};\n\n  let indexA = 0;\n\n  a.forEach((aValue, aKey) => {\n    if (!isValueEqual) {\n      return;\n    }\n\n    let hasMatch = false;\n    let matchIndexB = 0;\n\n    b.forEach((bValue, bKey) => {\n      if (\n        !hasMatch &&\n        !matchedIndices[matchIndexB] &&\n        (hasMatch =\n          isEqual(aKey, bKey, indexA, matchIndexB, a, b, meta) &&\n          isEqual(aValue, bValue, aKey, bKey, a, b, meta))\n      ) {\n        matchedIndices[matchIndexB] = true;\n      }\n\n      matchIndexB++;\n    });\n\n    indexA++;\n    isValueEqual = hasMatch;\n  });\n\n  return isValueEqual;\n}\n\n/**\n * Whether the `Map`s are equal in value, including circular references.\n */\nexport const areMapsEqualCircular = createIsCircular(areMapsEqual);\n","import { createIsCircular } from './utils';\n\nimport type { InternalEqualityComparator } from '../index.d';\n\ninterface Dictionary<Value> {\n  [key: string]: Value;\n  $$typeof?: any;\n}\n\nconst OWNER = '_owner';\nconst { hasOwnProperty } = Object.prototype;\n\n/**\n * Whether the objects are equal in value.\n */\nexport function areObjectsEqual(\n  a: Dictionary<any>,\n  b: Dictionary<any>,\n  isEqual: InternalEqualityComparator<any>,\n  meta: any,\n): boolean {\n  const keysA = Object.keys(a);\n\n  let index = keysA.length;\n\n  if (Object.keys(b).length !== index) {\n    return false;\n  }\n\n  let key: string;\n\n  // Decrementing `while` showed faster results than either incrementing or\n  // decrementing `for` loop and than an incrementing `while` loop. Declarative\n  // methods like `some` / `every` were not used to avoid incurring the garbage\n  // cost of anonymous callbacks.\n  while (index-- > 0) {\n    key = keysA[index];\n\n    if (key === OWNER) {\n      const reactElementA = !!a.$$typeof;\n      const reactElementB = !!b.$$typeof;\n\n      if ((reactElementA || reactElementB) && reactElementA !== reactElementB) {\n        return false;\n      }\n    }\n\n    if (\n      !hasOwnProperty.call(b, key) ||\n      !isEqual(a[key], b[key], key, key, a, b, meta)\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Whether the objects are equal in value, including circular references.\n */\nexport const areObjectsEqualCircular = createIsCircular(areObjectsEqual);\n","/**\n * Whether the regexps passed are equal in value.\n *\n * @NOTE\n * This is a standalone function instead of done inline in the comparator\n * to allow for overrides. An example of this would be supporting a\n * pre-ES2015 environment where the `flags` property is not available.\n */\nexport function areRegExpsEqual(a: RegExp, b: RegExp): boolean {\n  return a.source === b.source && a.flags === b.flags;\n}\n","import { createIsCircular } from './utils';\n\nimport type { InternalEqualityComparator } from '../index.d';\n\n/**\n * Whether the `Set`s are equal in value.\n */\nexport function areSetsEqual(\n  a: Set<any>,\n  b: Set<any>,\n  isEqual: InternalEqualityComparator<any>,\n  meta: any,\n): boolean {\n  let isValueEqual = a.size === b.size;\n\n  if (!isValueEqual) {\n    return false;\n  }\n\n  if (!a.size) {\n    return true;\n  }\n\n  // The use of `forEach()` is to avoid the transpilation cost of `for...of` comparisons, and\n  // the inability to control the performance of the resulting code. It also avoids excessive\n  // iteration compared to doing comparisons of `keys()` and `values()`. As a result, though,\n  // we cannot short-circuit the iterations; bookkeeping must be done to short-circuit the\n  // equality checks themselves.\n\n  const matchedIndices: Record<number, true> = {};\n\n  a.forEach((aValue, aKey) => {\n    if (!isValueEqual) {\n      return;\n    }\n\n    let hasMatch = false;\n    let matchIndex = 0;\n\n    b.forEach((bValue, bKey) => {\n      if (\n        !hasMatch &&\n        !matchedIndices[matchIndex] &&\n        (hasMatch = isEqual(aValue, bValue, aKey, bKey, a, b, meta))\n      ) {\n        matchedIndices[matchIndex] = true;\n      }\n\n      matchIndex++;\n    });\n\n    isValueEqual = hasMatch;\n  });\n\n  return isValueEqual;\n}\n\n/**\n * Whether the `Set`s are equal in value, including circular references.\n */\nexport const areSetsEqualCircular = createIsCircular(areSetsEqual);\n","import { createComparator } from './comparator';\nimport { areArraysEqual, areArraysEqualCircular } from './arrays';\nimport { areDatesEqual } from './dates';\nimport { areMapsEqual, areMapsEqualCircular } from './maps';\nimport { areObjectsEqual, areObjectsEqualCircular } from './objects';\nimport { areRegExpsEqual } from './regexps';\nimport { areSetsEqual, areSetsEqualCircular } from './sets';\nimport { createDefaultIsNestedEqual, merge, sameValueZeroEqual } from './utils';\n\nimport type {\n  BaseCircularMeta,\n  CreateComparatorCreatorOptions,\n  EqualityComparator,\n  GetComparatorOptions,\n} from '../index.d';\n\nexport { sameValueZeroEqual };\n\nconst DEFAULT_CONFIG: CreateComparatorCreatorOptions<undefined> = Object.freeze(\n  {\n    areArraysEqual,\n    areDatesEqual,\n    areMapsEqual,\n    areObjectsEqual,\n    areRegExpsEqual,\n    areSetsEqual,\n    createIsNestedEqual: createDefaultIsNestedEqual,\n  },\n);\nconst DEFAULT_CIRCULAR_CONFIG: CreateComparatorCreatorOptions<BaseCircularMeta> =\n  Object.freeze({\n    areArraysEqual: areArraysEqualCircular,\n    areDatesEqual,\n    areMapsEqual: areMapsEqualCircular,\n    areObjectsEqual: areObjectsEqualCircular,\n    areRegExpsEqual,\n    areSetsEqual: areSetsEqualCircular,\n    createIsNestedEqual: createDefaultIsNestedEqual,\n  });\n\nconst isDeepEqual = createComparator(DEFAULT_CONFIG);\n\n/**\n * Whether the items passed are deeply-equal in value.\n */\nexport function deepEqual<A, B>(a: A, b: B): boolean {\n  return isDeepEqual(a, b, undefined);\n}\n\nconst isShallowEqual = createComparator(\n  merge(DEFAULT_CONFIG, { createIsNestedEqual: () => sameValueZeroEqual }),\n);\n\n/**\n * Whether the items passed are shallowly-equal in value.\n */\nexport function shallowEqual<A, B>(a: A, b: B): boolean {\n  return isShallowEqual(a, b, undefined);\n}\n\nconst isCircularDeepEqual = createComparator(DEFAULT_CIRCULAR_CONFIG);\n\n/**\n * Whether the items passed are deeply-equal in value, including circular references.\n */\nexport function circularDeepEqual<A, B>(a: A, b: B): boolean {\n  return isCircularDeepEqual(a, b, new WeakMap());\n}\n\nconst isCircularShallowEqual = createComparator(\n  merge(DEFAULT_CIRCULAR_CONFIG, {\n    createIsNestedEqual: () => sameValueZeroEqual,\n  }),\n);\n\n/**\n * Whether the items passed are shallowly-equal in value, including circular references.\n */\nexport function circularShallowEqual<A, B>(a: A, b: B): boolean {\n  return isCircularShallowEqual(a, b, new WeakMap());\n}\n\n/**\n * Create a custom equality comparison method.\n *\n * This can be done to create very targeted comparisons in extreme hot-path scenarios\n * where the standard methods are not performant enough, but can also be used to provide\n * support for legacy environments that do not support expected features like\n * `RegExp.prototype.flags` out of the box.\n */\nexport function createCustomEqual<Meta = undefined>(\n  getComparatorOptions: GetComparatorOptions<Meta>,\n): EqualityComparator<Meta> {\n  return createComparator<Meta>(\n    merge(DEFAULT_CONFIG, getComparatorOptions(DEFAULT_CONFIG as any)),\n  );\n}\n\n/**\n * Create a custom equality comparison method that handles circular references. This is very\n * similar to `createCustomEqual`, with the only difference being that `meta` expects to be\n * populated with a `WeakMap`-like contract.\n *\n * This can be done to create very targeted comparisons in extreme hot-path scenarios\n * where the standard methods are not performant enough, but can also be used to provide\n * support for legacy environments that do not support expected features like\n * `WeakMap` out of the box.\n */\nexport function createCustomCircularEqual<\n  Meta extends BaseCircularMeta = WeakMap<any, any>,\n>(getComparatorOptions: GetComparatorOptions<Meta>): EqualityComparator<Meta> {\n  const comparator = createComparator<Meta>(\n    merge(\n      DEFAULT_CIRCULAR_CONFIG,\n      getComparatorOptions(DEFAULT_CIRCULAR_CONFIG as any),\n    ),\n  );\n\n  return ((a: any, b: any, meta: any = new WeakMap()) =>\n    comparator(a, b, meta)) as EqualityComparator<Meta>;\n}\n"]},"metadata":{},"sourceType":"script"}