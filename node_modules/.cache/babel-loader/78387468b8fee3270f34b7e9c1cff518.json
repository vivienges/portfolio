{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resizeHandleType = exports.resizeHandleAxesType = exports.default = void 0;\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/*:: import type {\n  Ref,\n  ChildrenArray as ReactChildrenArray,\n  Element as ReactElement\n} from \"react\";*/\n\n/*:: import type {\n  DragOverEvent,\n  EventCallback,\n  CompactType,\n  Layout,\n  LayoutItem,\n  ResizeHandleAxis\n} from \"./utils\";*/\n\n/*:: export type ReactRef<T: HTMLElement> = {|\n  +current: T | null\n|};*/\n// util\n\n/*:: export type ResizeHandle =\n  | ReactElement<any>\n  | ((\n      resizeHandleAxis: ResizeHandleAxis,\n      ref: ReactRef<HTMLElement>\n    ) => ReactElement<any>);*/\n// Defines which resize handles should be rendered (default: 'se')\n// Allows for any combination of:\n// 's' - South handle (bottom-center)\n// 'w' - West handle (left-center)\n// 'e' - East handle (right-center)\n// 'n' - North handle (top-center)\n// 'sw' - Southwest handle (bottom-left)\n// 'nw' - Northwest handle (top-left)\n// 'se' - Southeast handle (bottom-right)\n// 'ne' - Northeast handle (top-right)\n\n\nconst resizeHandleAxesType\n/*: ReactPropsChainableTypeChecker*/\n= _propTypes.default.arrayOf(_propTypes.default.oneOf([\"s\", \"w\", \"e\", \"n\", \"sw\", \"nw\", \"se\", \"ne\"])); // Custom component for resize handles\n\n\nexports.resizeHandleAxesType = resizeHandleAxesType;\n\nconst resizeHandleType\n/*: ReactPropsChainableTypeChecker*/\n= _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]);\n/*:: export type Props = {|\n  className: string,\n  style: Object,\n  width: number,\n  autoSize: boolean,\n  cols: number,\n  draggableCancel: string,\n  draggableHandle: string,\n  verticalCompact: boolean,\n  compactType: CompactType,\n  layout: Layout,\n  margin: [number, number],\n  containerPadding: ?[number, number],\n  rowHeight: number,\n  maxRows: number,\n  isBounded: boolean,\n  isDraggable: boolean,\n  isResizable: boolean,\n  isDroppable: boolean,\n  preventCollision: boolean,\n  useCSSTransforms: boolean,\n  transformScale: number,\n  droppingItem: $Shape<LayoutItem>,\n  resizeHandles: ResizeHandleAxis[],\n  resizeHandle?: ResizeHandle,\n  allowOverlap: boolean,\n\n  // Callbacks\n  onLayoutChange: Layout => void,\n  onDrag: EventCallback,\n  onDragStart: EventCallback,\n  onDragStop: EventCallback,\n  onResize: EventCallback,\n  onResizeStart: EventCallback,\n  onResizeStop: EventCallback,\n  onDropDragOver: (e: DragOverEvent) => ?({| w?: number, h?: number |} | false),\n  onDrop: (layout: Layout, item: ?LayoutItem, e: Event) => void,\n  children: ReactChildrenArray<ReactElement<any>>,\n  innerRef?: Ref<\"div\">\n|};*/\n\n/*:: export type DefaultProps = $Diff<\n  Props,\n  {\n    children: ReactChildrenArray<ReactElement<any>>,\n    width: number\n  }\n>;*/\n\n\nexports.resizeHandleType = resizeHandleType;\nvar _default = {\n  //\n  // Basic props\n  //\n  className: _propTypes.default.string,\n  style: _propTypes.default.object,\n  // This can be set explicitly. If it is not set, it will automatically\n  // be set to the container width. Note that resizes will *not* cause this to adjust.\n  // If you need that behavior, use WidthProvider.\n  width: _propTypes.default.number,\n  // If true, the container height swells and contracts to fit contents\n  autoSize: _propTypes.default.bool,\n  // # of cols.\n  cols: _propTypes.default.number,\n  // A selector that will not be draggable.\n  draggableCancel: _propTypes.default.string,\n  // A selector for the draggable handler\n  draggableHandle: _propTypes.default.string,\n  // Deprecated\n  verticalCompact: function (props\n  /*: Props*/\n  ) {\n    if (props.verticalCompact === false && process.env.NODE_ENV !== \"production\") {\n      console.warn( // eslint-disable-line no-console\n      \"`verticalCompact` on <ReactGridLayout> is deprecated and will be removed soon. \" + 'Use `compactType`: \"horizontal\" | \"vertical\" | null.');\n    }\n  },\n  // Choose vertical or hotizontal compaction\n  compactType: _propTypes.default.oneOf([\"vertical\", \"horizontal\"])\n  /*: ReactPropsChainableTypeChecker*/\n  ,\n  // layout is an array of object with the format:\n  // {x: Number, y: Number, w: Number, h: Number, i: String}\n  layout: function (props\n  /*: Props*/\n  ) {\n    var layout = props.layout; // I hope you're setting the data-grid property on the grid items\n\n    if (layout === undefined) return;\n\n    require(\"./utils\").validateLayout(layout, \"layout\");\n  },\n  //\n  // Grid Dimensions\n  //\n  // Margin between items [x, y] in px\n  margin: _propTypes.default.arrayOf(_propTypes.default.number)\n  /*: ReactPropsChainableTypeChecker*/\n  ,\n  // Padding inside the container [x, y] in px\n  containerPadding: _propTypes.default.arrayOf(_propTypes.default.number)\n  /*: ReactPropsChainableTypeChecker*/\n  ,\n  // Rows have a static height, but you can change this based on breakpoints if you like\n  rowHeight: _propTypes.default.number,\n  // Default Infinity, but you can specify a max here if you like.\n  // Note that this isn't fully fleshed out and won't error if you specify a layout that\n  // extends beyond the row capacity. It will, however, not allow users to drag/resize\n  // an item past the barrier. They can push items beyond the barrier, though.\n  // Intentionally not documented for this reason.\n  maxRows: _propTypes.default.number,\n  //\n  // Flags\n  //\n  isBounded: _propTypes.default.bool,\n  isDraggable: _propTypes.default.bool,\n  isResizable: _propTypes.default.bool,\n  // If true, grid can be placed one over the other.\n  allowOverlap: _propTypes.default.bool,\n  // If true, grid items won't change position when being dragged over.\n  preventCollision: _propTypes.default.bool,\n  // Use CSS transforms instead of top/left\n  useCSSTransforms: _propTypes.default.bool,\n  // parent layout transform scale\n  transformScale: _propTypes.default.number,\n  // If true, an external element can trigger onDrop callback with a specific grid position as a parameter\n  isDroppable: _propTypes.default.bool,\n  // Resize handle options\n  resizeHandles: resizeHandleAxesType,\n  resizeHandle: resizeHandleType,\n  //\n  // Callbacks\n  //\n  // Callback so you can save the layout. Calls after each drag & resize stops.\n  onLayoutChange: _propTypes.default.func,\n  // Calls when drag starts. Callback is of the signature (layout, oldItem, newItem, placeholder, e, ?node).\n  // All callbacks below have the same signature. 'start' and 'stop' callbacks omit the 'placeholder'.\n  onDragStart: _propTypes.default.func,\n  // Calls on each drag movement.\n  onDrag: _propTypes.default.func,\n  // Calls when drag is complete.\n  onDragStop: _propTypes.default.func,\n  //Calls when resize starts.\n  onResizeStart: _propTypes.default.func,\n  // Calls when resize movement happens.\n  onResize: _propTypes.default.func,\n  // Calls when resize is complete.\n  onResizeStop: _propTypes.default.func,\n  // Calls when some element is dropped.\n  onDrop: _propTypes.default.func,\n  //\n  // Other validations\n  //\n  droppingItem: _propTypes.default.shape({\n    i: _propTypes.default.string.isRequired,\n    w: _propTypes.default.number.isRequired,\n    h: _propTypes.default.number.isRequired\n  })\n  /*: ReactPropsChainableTypeChecker*/\n  ,\n  // Children must not have duplicate keys.\n  children: function (props\n  /*: Props*/\n  , propName\n  /*: string*/\n  ) {\n    const children = props[propName]; // Check children keys for duplicates. Throw if found.\n\n    const keys = {};\n\n    _react.default.Children.forEach(children, function (child) {\n      if ((child === null || child === void 0 ? void 0 : child.key) == null) return;\n\n      if (keys[child.key]) {\n        throw new Error('Duplicate child key \"' + child.key + '\" found! This will cause problems in ReactGridLayout.');\n      }\n\n      keys[child.key] = true;\n    });\n  },\n  // Optional ref for getting a reference for the wrapping div.\n  innerRef: _propTypes.default.any\n};\nexports.default = _default;","map":{"version":3,"sources":["/Users/viviengeschwind/Projects/Website/website-professional/node_modules/react-grid-layout/build/ReactGridLayoutPropTypes.js"],"names":["Object","defineProperty","exports","value","resizeHandleType","resizeHandleAxesType","default","_propTypes","_interopRequireDefault","require","_react","obj","__esModule","arrayOf","oneOf","oneOfType","node","func","_default","className","string","style","object","width","number","autoSize","bool","cols","draggableCancel","draggableHandle","verticalCompact","props","process","env","NODE_ENV","console","warn","compactType","layout","undefined","validateLayout","margin","containerPadding","rowHeight","maxRows","isBounded","isDraggable","isResizable","allowOverlap","preventCollision","useCSSTransforms","transformScale","isDroppable","resizeHandles","resizeHandle","onLayoutChange","onDragStart","onDrag","onDragStop","onResizeStart","onResize","onResizeStop","onDrop","droppingItem","shape","i","isRequired","w","h","children","propName","keys","Children","forEach","child","key","Error","innerRef","any"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resizeHandleType = exports.resizeHandleAxesType = exports.default = void 0;\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\nvar _react = _interopRequireDefault(require(\"react\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/*:: import type {\n  Ref,\n  ChildrenArray as ReactChildrenArray,\n  Element as ReactElement\n} from \"react\";*/\n/*:: import type {\n  DragOverEvent,\n  EventCallback,\n  CompactType,\n  Layout,\n  LayoutItem,\n  ResizeHandleAxis\n} from \"./utils\";*/\n/*:: export type ReactRef<T: HTMLElement> = {|\n  +current: T | null\n|};*/\n// util\n/*:: export type ResizeHandle =\n  | ReactElement<any>\n  | ((\n      resizeHandleAxis: ResizeHandleAxis,\n      ref: ReactRef<HTMLElement>\n    ) => ReactElement<any>);*/\n// Defines which resize handles should be rendered (default: 'se')\n// Allows for any combination of:\n// 's' - South handle (bottom-center)\n// 'w' - West handle (left-center)\n// 'e' - East handle (right-center)\n// 'n' - North handle (top-center)\n// 'sw' - Southwest handle (bottom-left)\n// 'nw' - Northwest handle (top-left)\n// 'se' - Southeast handle (bottom-right)\n// 'ne' - Northeast handle (top-right)\nconst resizeHandleAxesType /*: ReactPropsChainableTypeChecker*/ = _propTypes.default.arrayOf(_propTypes.default.oneOf([\"s\", \"w\", \"e\", \"n\", \"sw\", \"nw\", \"se\", \"ne\"]));\n// Custom component for resize handles\nexports.resizeHandleAxesType = resizeHandleAxesType;\nconst resizeHandleType /*: ReactPropsChainableTypeChecker*/ = _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]);\n/*:: export type Props = {|\n  className: string,\n  style: Object,\n  width: number,\n  autoSize: boolean,\n  cols: number,\n  draggableCancel: string,\n  draggableHandle: string,\n  verticalCompact: boolean,\n  compactType: CompactType,\n  layout: Layout,\n  margin: [number, number],\n  containerPadding: ?[number, number],\n  rowHeight: number,\n  maxRows: number,\n  isBounded: boolean,\n  isDraggable: boolean,\n  isResizable: boolean,\n  isDroppable: boolean,\n  preventCollision: boolean,\n  useCSSTransforms: boolean,\n  transformScale: number,\n  droppingItem: $Shape<LayoutItem>,\n  resizeHandles: ResizeHandleAxis[],\n  resizeHandle?: ResizeHandle,\n  allowOverlap: boolean,\n\n  // Callbacks\n  onLayoutChange: Layout => void,\n  onDrag: EventCallback,\n  onDragStart: EventCallback,\n  onDragStop: EventCallback,\n  onResize: EventCallback,\n  onResizeStart: EventCallback,\n  onResizeStop: EventCallback,\n  onDropDragOver: (e: DragOverEvent) => ?({| w?: number, h?: number |} | false),\n  onDrop: (layout: Layout, item: ?LayoutItem, e: Event) => void,\n  children: ReactChildrenArray<ReactElement<any>>,\n  innerRef?: Ref<\"div\">\n|};*/\n/*:: export type DefaultProps = $Diff<\n  Props,\n  {\n    children: ReactChildrenArray<ReactElement<any>>,\n    width: number\n  }\n>;*/\nexports.resizeHandleType = resizeHandleType;\nvar _default = {\n  //\n  // Basic props\n  //\n  className: _propTypes.default.string,\n  style: _propTypes.default.object,\n  // This can be set explicitly. If it is not set, it will automatically\n  // be set to the container width. Note that resizes will *not* cause this to adjust.\n  // If you need that behavior, use WidthProvider.\n  width: _propTypes.default.number,\n  // If true, the container height swells and contracts to fit contents\n  autoSize: _propTypes.default.bool,\n  // # of cols.\n  cols: _propTypes.default.number,\n  // A selector that will not be draggable.\n  draggableCancel: _propTypes.default.string,\n  // A selector for the draggable handler\n  draggableHandle: _propTypes.default.string,\n  // Deprecated\n  verticalCompact: function (props /*: Props*/) {\n    if (props.verticalCompact === false && process.env.NODE_ENV !== \"production\") {\n      console.warn(\n      // eslint-disable-line no-console\n      \"`verticalCompact` on <ReactGridLayout> is deprecated and will be removed soon. \" + 'Use `compactType`: \"horizontal\" | \"vertical\" | null.');\n    }\n  },\n  // Choose vertical or hotizontal compaction\n  compactType: (_propTypes.default.oneOf([\"vertical\", \"horizontal\"]) /*: ReactPropsChainableTypeChecker*/),\n  // layout is an array of object with the format:\n  // {x: Number, y: Number, w: Number, h: Number, i: String}\n  layout: function (props /*: Props*/) {\n    var layout = props.layout;\n    // I hope you're setting the data-grid property on the grid items\n    if (layout === undefined) return;\n    require(\"./utils\").validateLayout(layout, \"layout\");\n  },\n  //\n  // Grid Dimensions\n  //\n\n  // Margin between items [x, y] in px\n  margin: (_propTypes.default.arrayOf(_propTypes.default.number) /*: ReactPropsChainableTypeChecker*/),\n  // Padding inside the container [x, y] in px\n  containerPadding: (_propTypes.default.arrayOf(_propTypes.default.number) /*: ReactPropsChainableTypeChecker*/),\n  // Rows have a static height, but you can change this based on breakpoints if you like\n  rowHeight: _propTypes.default.number,\n  // Default Infinity, but you can specify a max here if you like.\n  // Note that this isn't fully fleshed out and won't error if you specify a layout that\n  // extends beyond the row capacity. It will, however, not allow users to drag/resize\n  // an item past the barrier. They can push items beyond the barrier, though.\n  // Intentionally not documented for this reason.\n  maxRows: _propTypes.default.number,\n  //\n  // Flags\n  //\n  isBounded: _propTypes.default.bool,\n  isDraggable: _propTypes.default.bool,\n  isResizable: _propTypes.default.bool,\n  // If true, grid can be placed one over the other.\n  allowOverlap: _propTypes.default.bool,\n  // If true, grid items won't change position when being dragged over.\n  preventCollision: _propTypes.default.bool,\n  // Use CSS transforms instead of top/left\n  useCSSTransforms: _propTypes.default.bool,\n  // parent layout transform scale\n  transformScale: _propTypes.default.number,\n  // If true, an external element can trigger onDrop callback with a specific grid position as a parameter\n  isDroppable: _propTypes.default.bool,\n  // Resize handle options\n  resizeHandles: resizeHandleAxesType,\n  resizeHandle: resizeHandleType,\n  //\n  // Callbacks\n  //\n\n  // Callback so you can save the layout. Calls after each drag & resize stops.\n  onLayoutChange: _propTypes.default.func,\n  // Calls when drag starts. Callback is of the signature (layout, oldItem, newItem, placeholder, e, ?node).\n  // All callbacks below have the same signature. 'start' and 'stop' callbacks omit the 'placeholder'.\n  onDragStart: _propTypes.default.func,\n  // Calls on each drag movement.\n  onDrag: _propTypes.default.func,\n  // Calls when drag is complete.\n  onDragStop: _propTypes.default.func,\n  //Calls when resize starts.\n  onResizeStart: _propTypes.default.func,\n  // Calls when resize movement happens.\n  onResize: _propTypes.default.func,\n  // Calls when resize is complete.\n  onResizeStop: _propTypes.default.func,\n  // Calls when some element is dropped.\n  onDrop: _propTypes.default.func,\n  //\n  // Other validations\n  //\n\n  droppingItem: (_propTypes.default.shape({\n    i: _propTypes.default.string.isRequired,\n    w: _propTypes.default.number.isRequired,\n    h: _propTypes.default.number.isRequired\n  }) /*: ReactPropsChainableTypeChecker*/),\n  // Children must not have duplicate keys.\n  children: function (props /*: Props*/, propName /*: string*/) {\n    const children = props[propName];\n\n    // Check children keys for duplicates. Throw if found.\n    const keys = {};\n    _react.default.Children.forEach(children, function (child) {\n      if ((child === null || child === void 0 ? void 0 : child.key) == null) return;\n      if (keys[child.key]) {\n        throw new Error('Duplicate child key \"' + child.key + '\" found! This will cause problems in ReactGridLayout.');\n      }\n      keys[child.key] = true;\n    });\n  },\n  // Optional ref for getting a reference for the wrapping div.\n  innerRef: _propTypes.default.any\n};\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}