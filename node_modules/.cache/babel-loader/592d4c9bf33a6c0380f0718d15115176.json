{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.browserPrefixToKey = browserPrefixToKey;\nexports.browserPrefixToStyle = browserPrefixToStyle;\nexports.default = void 0;\nexports.getPrefix = getPrefix;\nconst prefixes = ['Moz', 'Webkit', 'O', 'ms'];\n\nfunction getPrefix()\n/*: string*/\n{\n  var _window$document;\n\n  let prop\n  /*: string*/\n  = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'transform'; // Ensure we're running in an environment where there is actually a global\n  // `window` obj\n\n  if (typeof window === 'undefined') return ''; // If we're in a pseudo-browser server-side environment, this access\n  // path may not exist, so bail out if it doesn't.\n\n  const style = (_window$document = window.document) === null || _window$document === void 0 || (_window$document = _window$document.documentElement) === null || _window$document === void 0 ? void 0 : _window$document.style;\n  if (!style) return '';\n  if (prop in style) return '';\n\n  for (let i = 0; i < prefixes.length; i++) {\n    if (browserPrefixToKey(prop, prefixes[i]) in style) return prefixes[i];\n  }\n\n  return '';\n}\n\nfunction browserPrefixToKey(prop\n/*: string*/\n, prefix\n/*: string*/\n)\n/*: string*/\n{\n  return prefix ? \"\".concat(prefix).concat(kebabToTitleCase(prop)) : prop;\n}\n\nfunction browserPrefixToStyle(prop\n/*: string*/\n, prefix\n/*: string*/\n)\n/*: string*/\n{\n  return prefix ? \"-\".concat(prefix.toLowerCase(), \"-\").concat(prop) : prop;\n}\n\nfunction kebabToTitleCase(str\n/*: string*/\n)\n/*: string*/\n{\n  let out = '';\n  let shouldCapitalize = true;\n\n  for (let i = 0; i < str.length; i++) {\n    if (shouldCapitalize) {\n      out += str[i].toUpperCase();\n      shouldCapitalize = false;\n    } else if (str[i] === '-') {\n      shouldCapitalize = true;\n    } else {\n      out += str[i];\n    }\n  }\n\n  return out;\n} // Default export is the prefix itself, like 'Moz', 'Webkit', etc\n// Note that you may have to re-test for certain things; for instance, Chrome 50\n// can handle unprefixed `transform`, but not unprefixed `user-select`\n\n\nvar _default = exports.default = getPrefix()\n/*: string*/\n;","map":{"version":3,"sources":["/Users/viviengeschwind/Projects/Website/website-professional/node_modules/react-draggable/build/cjs/utils/getPrefix.js"],"names":["Object","defineProperty","exports","value","browserPrefixToKey","browserPrefixToStyle","default","getPrefix","prefixes","_window$document","prop","arguments","length","undefined","window","style","document","documentElement","i","prefix","concat","kebabToTitleCase","toLowerCase","str","out","shouldCapitalize","toUpperCase","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.browserPrefixToKey = browserPrefixToKey;\nexports.browserPrefixToStyle = browserPrefixToStyle;\nexports.default = void 0;\nexports.getPrefix = getPrefix;\nconst prefixes = ['Moz', 'Webkit', 'O', 'ms'];\nfunction getPrefix() /*: string*/{\n  var _window$document;\n  let prop /*: string*/ = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'transform';\n  // Ensure we're running in an environment where there is actually a global\n  // `window` obj\n  if (typeof window === 'undefined') return '';\n\n  // If we're in a pseudo-browser server-side environment, this access\n  // path may not exist, so bail out if it doesn't.\n  const style = (_window$document = window.document) === null || _window$document === void 0 || (_window$document = _window$document.documentElement) === null || _window$document === void 0 ? void 0 : _window$document.style;\n  if (!style) return '';\n  if (prop in style) return '';\n  for (let i = 0; i < prefixes.length; i++) {\n    if (browserPrefixToKey(prop, prefixes[i]) in style) return prefixes[i];\n  }\n  return '';\n}\nfunction browserPrefixToKey(prop /*: string*/, prefix /*: string*/) /*: string*/{\n  return prefix ? \"\".concat(prefix).concat(kebabToTitleCase(prop)) : prop;\n}\nfunction browserPrefixToStyle(prop /*: string*/, prefix /*: string*/) /*: string*/{\n  return prefix ? \"-\".concat(prefix.toLowerCase(), \"-\").concat(prop) : prop;\n}\nfunction kebabToTitleCase(str /*: string*/) /*: string*/{\n  let out = '';\n  let shouldCapitalize = true;\n  for (let i = 0; i < str.length; i++) {\n    if (shouldCapitalize) {\n      out += str[i].toUpperCase();\n      shouldCapitalize = false;\n    } else if (str[i] === '-') {\n      shouldCapitalize = true;\n    } else {\n      out += str[i];\n    }\n  }\n  return out;\n}\n\n// Default export is the prefix itself, like 'Moz', 'Webkit', etc\n// Note that you may have to re-test for certain things; for instance, Chrome 50\n// can handle unprefixed `transform`, but not unprefixed `user-select`\nvar _default = exports.default = (getPrefix() /*: string*/);"]},"metadata":{},"sourceType":"script"}