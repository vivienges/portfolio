{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useId as useId, unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { useTabsContext } from '../Tabs';\nimport { extractEventHandlers } from '../utils/extractEventHandlers';\nimport { useCompoundItem } from '../utils/useCompoundItem';\nimport { useListItem } from '../useList';\nimport { useButton } from '../useButton';\nimport { combineHooksSlotProps } from '../utils/combineHooksSlotProps';\n\nfunction tabValueGenerator(otherTabValues) {\n  return otherTabValues.size;\n}\n/**\n *\n * Demos:\n *\n * - [Tabs](https://mui.com/base-ui/react-tabs/#hooks)\n *\n * API:\n *\n * - [useTab API](https://mui.com/base-ui/react-tabs/hooks-api/#use-tab)\n */\n\n\nfunction useTab(parameters) {\n  var valueParam = parameters.value,\n      externalRef = parameters.rootRef,\n      _parameters$disabled = parameters.disabled,\n      disabled = _parameters$disabled === void 0 ? false : _parameters$disabled,\n      idParam = parameters.id;\n  var tabRef = React.useRef(null);\n  var id = useId(idParam);\n\n  var _useTabsContext = useTabsContext(),\n      selectedValue = _useTabsContext.value,\n      selectionFollowsFocus = _useTabsContext.selectionFollowsFocus,\n      getTabPanelId = _useTabsContext.getTabPanelId;\n\n  var tabMetadata = React.useMemo(function () {\n    return {\n      disabled: disabled,\n      ref: tabRef,\n      id: id\n    };\n  }, [disabled, tabRef, id]);\n\n  var _useCompoundItem = useCompoundItem(valueParam != null ? valueParam : tabValueGenerator, tabMetadata),\n      value = _useCompoundItem.id,\n      index = _useCompoundItem.index,\n      totalTabsCount = _useCompoundItem.totalItemCount;\n\n  var _useListItem = useListItem({\n    item: value\n  }),\n      getTabProps = _useListItem.getRootProps,\n      listItemRefHandler = _useListItem.rootRef,\n      highlighted = _useListItem.highlighted,\n      selected = _useListItem.selected;\n\n  var _useButton = useButton({\n    disabled: disabled,\n    focusableWhenDisabled: !selectionFollowsFocus,\n    type: 'button'\n  }),\n      getButtonProps = _useButton.getRootProps,\n      buttonRefHandler = _useButton.rootRef,\n      active = _useButton.active,\n      focusVisible = _useButton.focusVisible,\n      setFocusVisible = _useButton.setFocusVisible;\n\n  var handleRef = useForkRef(tabRef, externalRef, listItemRefHandler, buttonRefHandler);\n  var tabPanelId = value !== undefined ? getTabPanelId(value) : undefined;\n\n  var getRootProps = function getRootProps() {\n    var externalProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var externalEventHandlers = extractEventHandlers(externalProps);\n    var getCombinedRootProps = combineHooksSlotProps(getTabProps, getButtonProps);\n    return _extends({}, externalProps, getCombinedRootProps(externalEventHandlers), {\n      role: 'tab',\n      'aria-controls': tabPanelId,\n      'aria-selected': selected,\n      id: id,\n      ref: handleRef\n    });\n  };\n\n  return {\n    getRootProps: getRootProps,\n    active: active,\n    focusVisible: focusVisible,\n    highlighted: highlighted,\n    index: index,\n    rootRef: handleRef,\n    // the `selected` state isn't set on the server (it relies on effects to be calculated),\n    // so we fall back to checking the `value` prop with the selectedValue from the TabsContext\n    selected: selected || value === selectedValue,\n    setFocusVisible: setFocusVisible,\n    totalTabsCount: totalTabsCount\n  };\n}\n\nexport { useTab };","map":{"version":3,"sources":["/Users/viviengeschwind/Projects/Website/website-professional/node_modules/@mui/base/useTab/useTab.js"],"names":["_extends","React","unstable_useId","useId","unstable_useForkRef","useForkRef","useTabsContext","extractEventHandlers","useCompoundItem","useListItem","useButton","combineHooksSlotProps","tabValueGenerator","otherTabValues","size","useTab","parameters","valueParam","value","externalRef","rootRef","disabled","idParam","id","tabRef","useRef","selectedValue","selectionFollowsFocus","getTabPanelId","tabMetadata","useMemo","ref","index","totalTabsCount","totalItemCount","item","getTabProps","getRootProps","listItemRefHandler","highlighted","selected","focusableWhenDisabled","type","getButtonProps","buttonRefHandler","active","focusVisible","setFocusVisible","handleRef","tabPanelId","undefined","externalProps","externalEventHandlers","getCombinedRootProps","role"],"mappings":"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","sourcesContent":["'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useId as useId, unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { useTabsContext } from '../Tabs';\nimport { extractEventHandlers } from '../utils/extractEventHandlers';\nimport { useCompoundItem } from '../utils/useCompoundItem';\nimport { useListItem } from '../useList';\nimport { useButton } from '../useButton';\nimport { combineHooksSlotProps } from '../utils/combineHooksSlotProps';\nfunction tabValueGenerator(otherTabValues) {\n  return otherTabValues.size;\n}\n\n/**\n *\n * Demos:\n *\n * - [Tabs](https://mui.com/base-ui/react-tabs/#hooks)\n *\n * API:\n *\n * - [useTab API](https://mui.com/base-ui/react-tabs/hooks-api/#use-tab)\n */\nfunction useTab(parameters) {\n  const {\n    value: valueParam,\n    rootRef: externalRef,\n    disabled = false,\n    id: idParam\n  } = parameters;\n  const tabRef = React.useRef(null);\n  const id = useId(idParam);\n  const {\n    value: selectedValue,\n    selectionFollowsFocus,\n    getTabPanelId\n  } = useTabsContext();\n  const tabMetadata = React.useMemo(() => ({\n    disabled,\n    ref: tabRef,\n    id\n  }), [disabled, tabRef, id]);\n  const {\n    id: value,\n    index,\n    totalItemCount: totalTabsCount\n  } = useCompoundItem(valueParam != null ? valueParam : tabValueGenerator, tabMetadata);\n  const {\n    getRootProps: getTabProps,\n    rootRef: listItemRefHandler,\n    highlighted,\n    selected\n  } = useListItem({\n    item: value\n  });\n  const {\n    getRootProps: getButtonProps,\n    rootRef: buttonRefHandler,\n    active,\n    focusVisible,\n    setFocusVisible\n  } = useButton({\n    disabled,\n    focusableWhenDisabled: !selectionFollowsFocus,\n    type: 'button'\n  });\n  const handleRef = useForkRef(tabRef, externalRef, listItemRefHandler, buttonRefHandler);\n  const tabPanelId = value !== undefined ? getTabPanelId(value) : undefined;\n  const getRootProps = (externalProps = {}) => {\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    const getCombinedRootProps = combineHooksSlotProps(getTabProps, getButtonProps);\n    return _extends({}, externalProps, getCombinedRootProps(externalEventHandlers), {\n      role: 'tab',\n      'aria-controls': tabPanelId,\n      'aria-selected': selected,\n      id,\n      ref: handleRef\n    });\n  };\n  return {\n    getRootProps,\n    active,\n    focusVisible,\n    highlighted,\n    index,\n    rootRef: handleRef,\n    // the `selected` state isn't set on the server (it relies on effects to be calculated),\n    // so we fall back to checking the `value` prop with the selectedValue from the TabsContext\n    selected: selected || value === selectedValue,\n    setFocusVisible,\n    totalTabsCount\n  };\n}\nexport { useTab };"]},"metadata":{},"sourceType":"module"}