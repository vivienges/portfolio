{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactDraggable = require(\"react-draggable\");\n\nvar _reactResizable = require(\"react-resizable\");\n\nvar _utils = require(\"./utils\");\n\nvar _calculateUtils = require(\"./calculateUtils\");\n\nvar _ReactGridLayoutPropTypes = require(\"./ReactGridLayoutPropTypes\");\n\nvar _clsx = _interopRequireDefault(require(\"clsx\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n\n  return typeof key === \"symbol\" ? key : String(key);\n}\n\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n\n  return (hint === \"string\" ? String : Number)(input);\n}\n/*:: import type { Element as ReactElement, Node as ReactNode } from \"react\";*/\n\n/*:: import type {\n  ReactDraggableCallbackData,\n  GridDragEvent,\n  GridResizeEvent,\n  DroppingPosition,\n  Position,\n  ResizeHandleAxis\n} from \"./utils\";*/\n\n/*:: import type { PositionParams } from \"./calculateUtils\";*/\n\n/*:: import type { ResizeHandle, ReactRef } from \"./ReactGridLayoutPropTypes\";*/\n\n/*:: type PartialPosition = { top: number, left: number };*/\n\n/*:: type GridItemCallback<Data: GridDragEvent | GridResizeEvent> = (\n  i: string,\n  w: number,\n  h: number,\n  Data\n) => void;*/\n\n/*:: type ResizeCallbackData = {\n  node: HTMLElement,\n  size: Position,\n  handle: ResizeHandleAxis\n};*/\n\n/*:: type GridItemResizeCallback = (\n  e: Event,\n  data: ResizeCallbackData,\n  position: Position\n) => void;*/\n\n/*:: type State = {\n  resizing: ?{ top: number, left: number, width: number, height: number },\n  dragging: ?{ top: number, left: number },\n  className: string\n};*/\n\n/*:: type Props = {\n  children: ReactElement<any>,\n  cols: number,\n  containerWidth: number,\n  margin: [number, number],\n  containerPadding: [number, number],\n  rowHeight: number,\n  maxRows: number,\n  isDraggable: boolean,\n  isResizable: boolean,\n  isBounded: boolean,\n  static?: boolean,\n  useCSSTransforms?: boolean,\n  usePercentages?: boolean,\n  transformScale: number,\n  droppingPosition?: DroppingPosition,\n\n  className: string,\n  style?: Object,\n  // Draggability\n  cancel: string,\n  handle: string,\n\n  x: number,\n  y: number,\n  w: number,\n  h: number,\n\n  minW: number,\n  maxW: number,\n  minH: number,\n  maxH: number,\n  i: string,\n\n  resizeHandles?: ResizeHandleAxis[],\n  resizeHandle?: ResizeHandle,\n\n  onDrag?: GridItemCallback<GridDragEvent>,\n  onDragStart?: GridItemCallback<GridDragEvent>,\n  onDragStop?: GridItemCallback<GridDragEvent>,\n  onResize?: GridItemCallback<GridResizeEvent>,\n  onResizeStart?: GridItemCallback<GridResizeEvent>,\n  onResizeStop?: GridItemCallback<GridResizeEvent>\n};*/\n\n/*:: type DefaultProps = {\n  className: string,\n  cancel: string,\n  handle: string,\n  minH: number,\n  minW: number,\n  maxH: number,\n  maxW: number,\n  transformScale: number\n};*/\n\n/**\n * An individual item within a ReactGridLayout.\n */\n\n\nclass GridItem extends _react.default.Component\n/*:: <Props, State>*/\n{\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"state\", {\n      resizing: null,\n      dragging: null,\n      className: \"\"\n    });\n\n    _defineProperty(this, \"elementRef\", /*#__PURE__*/_react.default.createRef());\n    /**\n     * onDragStart event handler\n     * @param  {Event}  e             event data\n     * @param  {Object} callbackData  an object with node, delta and position information\n     */\n\n\n    _defineProperty(this, \"onDragStart\", (e, _ref) => {\n      let {\n        node\n      } = _ref;\n      const {\n        onDragStart,\n        transformScale\n      } = this.props;\n      if (!onDragStart) return;\n      const newPosition\n      /*: PartialPosition*/\n      = {\n        top: 0,\n        left: 0\n      }; // TODO: this wont work on nested parents\n\n      const {\n        offsetParent\n      } = node;\n      if (!offsetParent) return;\n      const parentRect = offsetParent.getBoundingClientRect();\n      const clientRect = node.getBoundingClientRect();\n      const cLeft = clientRect.left / transformScale;\n      const pLeft = parentRect.left / transformScale;\n      const cTop = clientRect.top / transformScale;\n      const pTop = parentRect.top / transformScale;\n      newPosition.left = cLeft - pLeft + offsetParent.scrollLeft;\n      newPosition.top = cTop - pTop + offsetParent.scrollTop;\n      this.setState({\n        dragging: newPosition\n      }); // Call callback with this data\n\n      const {\n        x,\n        y\n      } = (0, _calculateUtils.calcXY)(this.getPositionParams(), newPosition.top, newPosition.left, this.props.w, this.props.h);\n      return onDragStart.call(this, this.props.i, x, y, {\n        e,\n        node,\n        newPosition\n      });\n    });\n    /**\n     * onDrag event handler\n     * @param  {Event}  e             event data\n     * @param  {Object} callbackData  an object with node, delta and position information\n     */\n\n\n    _defineProperty(this, \"onDrag\", (e, _ref2) => {\n      let {\n        node,\n        deltaX,\n        deltaY\n      } = _ref2;\n      const {\n        onDrag\n      } = this.props;\n      if (!onDrag) return;\n\n      if (!this.state.dragging) {\n        throw new Error(\"onDrag called before onDragStart.\");\n      }\n\n      let top = this.state.dragging.top + deltaY;\n      let left = this.state.dragging.left + deltaX;\n      const {\n        isBounded,\n        i,\n        w,\n        h,\n        containerWidth\n      } = this.props;\n      const positionParams = this.getPositionParams(); // Boundary calculations; keeps items within the grid\n\n      if (isBounded) {\n        const {\n          offsetParent\n        } = node;\n\n        if (offsetParent) {\n          const {\n            margin,\n            rowHeight\n          } = this.props;\n          const bottomBoundary = offsetParent.clientHeight - (0, _calculateUtils.calcGridItemWHPx)(h, rowHeight, margin[1]);\n          top = (0, _calculateUtils.clamp)(top, 0, bottomBoundary);\n          const colWidth = (0, _calculateUtils.calcGridColWidth)(positionParams);\n          const rightBoundary = containerWidth - (0, _calculateUtils.calcGridItemWHPx)(w, colWidth, margin[0]);\n          left = (0, _calculateUtils.clamp)(left, 0, rightBoundary);\n        }\n      }\n\n      const newPosition\n      /*: PartialPosition*/\n      = {\n        top,\n        left\n      };\n      this.setState({\n        dragging: newPosition\n      }); // Call callback with this data\n\n      const {\n        x,\n        y\n      } = (0, _calculateUtils.calcXY)(positionParams, top, left, w, h);\n      return onDrag.call(this, i, x, y, {\n        e,\n        node,\n        newPosition\n      });\n    });\n    /**\n     * onDragStop event handler\n     * @param  {Event}  e             event data\n     * @param  {Object} callbackData  an object with node, delta and position information\n     */\n\n\n    _defineProperty(this, \"onDragStop\", (e, _ref3) => {\n      let {\n        node\n      } = _ref3;\n      const {\n        onDragStop\n      } = this.props;\n      if (!onDragStop) return;\n\n      if (!this.state.dragging) {\n        throw new Error(\"onDragEnd called before onDragStart.\");\n      }\n\n      const {\n        w,\n        h,\n        i\n      } = this.props;\n      const {\n        left,\n        top\n      } = this.state.dragging;\n      const newPosition\n      /*: PartialPosition*/\n      = {\n        top,\n        left\n      };\n      this.setState({\n        dragging: null\n      });\n      const {\n        x,\n        y\n      } = (0, _calculateUtils.calcXY)(this.getPositionParams(), top, left, w, h);\n      return onDragStop.call(this, i, x, y, {\n        e,\n        node,\n        newPosition\n      });\n    });\n    /**\n     * onResizeStop event handler\n     * @param  {Event}  e             event data\n     * @param  {Object} callbackData  an object with node and size information\n     */\n\n\n    _defineProperty(this, \"onResizeStop\", (e, callbackData, position) => this.onResizeHandler(e, callbackData, position, \"onResizeStop\")); // onResizeStart event handler\n\n\n    _defineProperty(this, \"onResizeStart\", (e, callbackData, position) => this.onResizeHandler(e, callbackData, position, \"onResizeStart\")); // onResize event handler\n\n\n    _defineProperty(this, \"onResize\", (e, callbackData, position) => this.onResizeHandler(e, callbackData, position, \"onResize\"));\n  }\n\n  shouldComponentUpdate(nextProps\n  /*: Props*/\n  , nextState\n  /*: State*/\n  )\n  /*: boolean*/\n  {\n    // We can't deeply compare children. If the developer memoizes them, we can\n    // use this optimization.\n    if (this.props.children !== nextProps.children) return true;\n    if (this.props.droppingPosition !== nextProps.droppingPosition) return true; // TODO memoize these calculations so they don't take so long?\n\n    const oldPosition = (0, _calculateUtils.calcGridItemPosition)(this.getPositionParams(this.props), this.props.x, this.props.y, this.props.w, this.props.h, this.state);\n    const newPosition = (0, _calculateUtils.calcGridItemPosition)(this.getPositionParams(nextProps), nextProps.x, nextProps.y, nextProps.w, nextProps.h, nextState);\n    return !(0, _utils.fastPositionEqual)(oldPosition, newPosition) || this.props.useCSSTransforms !== nextProps.useCSSTransforms;\n  }\n\n  componentDidMount() {\n    this.moveDroppingItem({});\n  }\n\n  componentDidUpdate(prevProps\n  /*: Props*/\n  ) {\n    this.moveDroppingItem(prevProps);\n  } // When a droppingPosition is present, this means we should fire a move event, as if we had moved\n  // this element by `x, y` pixels.\n\n\n  moveDroppingItem(prevProps\n  /*: Props*/\n  ) {\n    const {\n      droppingPosition\n    } = this.props;\n    if (!droppingPosition) return;\n    const node = this.elementRef.current; // Can't find DOM node (are we unmounted?)\n\n    if (!node) return;\n    const prevDroppingPosition = prevProps.droppingPosition || {\n      left: 0,\n      top: 0\n    };\n    const {\n      dragging\n    } = this.state;\n    const shouldDrag = dragging && droppingPosition.left !== prevDroppingPosition.left || droppingPosition.top !== prevDroppingPosition.top;\n\n    if (!dragging) {\n      this.onDragStart(droppingPosition.e, {\n        node,\n        deltaX: droppingPosition.left,\n        deltaY: droppingPosition.top\n      });\n    } else if (shouldDrag) {\n      const deltaX = droppingPosition.left - dragging.left;\n      const deltaY = droppingPosition.top - dragging.top;\n      this.onDrag(droppingPosition.e, {\n        node,\n        deltaX,\n        deltaY\n      });\n    }\n  }\n\n  getPositionParams()\n  /*: PositionParams*/\n  {\n    let props\n    /*: Props*/\n    = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n    return {\n      cols: props.cols,\n      containerPadding: props.containerPadding,\n      containerWidth: props.containerWidth,\n      margin: props.margin,\n      maxRows: props.maxRows,\n      rowHeight: props.rowHeight\n    };\n  }\n  /**\n   * This is where we set the grid item's absolute placement. It gets a little tricky because we want to do it\n   * well when server rendering, and the only way to do that properly is to use percentage width/left because\n   * we don't know exactly what the browser viewport is.\n   * Unfortunately, CSS Transforms, which are great for performance, break in this instance because a percentage\n   * left is relative to the item itself, not its container! So we cannot use them on the server rendering pass.\n   *\n   * @param  {Object} pos Position object with width, height, left, top.\n   * @return {Object}     Style object.\n   */\n\n\n  createStyle(pos\n  /*: Position*/\n  )\n  /*: { [key: string]: ?string }*/\n  {\n    const {\n      usePercentages,\n      containerWidth,\n      useCSSTransforms\n    } = this.props;\n    let style; // CSS Transforms support (default)\n\n    if (useCSSTransforms) {\n      style = (0, _utils.setTransform)(pos);\n    } else {\n      // top,left (slow)\n      style = (0, _utils.setTopLeft)(pos); // This is used for server rendering.\n\n      if (usePercentages) {\n        style.left = (0, _utils.perc)(pos.left / containerWidth);\n        style.width = (0, _utils.perc)(pos.width / containerWidth);\n      }\n    }\n\n    return style;\n  }\n  /**\n   * Mix a Draggable instance into a child.\n   * @param  {Element} child    Child element.\n   * @return {Element}          Child wrapped in Draggable.\n   */\n\n\n  mixinDraggable(child\n  /*: ReactElement<any>*/\n  , isDraggable\n  /*: boolean*/\n  )\n  /*: ReactElement<any>*/\n  {\n    return /*#__PURE__*/_react.default.createElement(_reactDraggable.DraggableCore, {\n      disabled: !isDraggable,\n      onStart: this.onDragStart,\n      onDrag: this.onDrag,\n      onStop: this.onDragStop,\n      handle: this.props.handle,\n      cancel: \".react-resizable-handle\" + (this.props.cancel ? \",\" + this.props.cancel : \"\"),\n      scale: this.props.transformScale,\n      nodeRef: this.elementRef\n    }, child);\n  }\n  /**\n   * Utility function to setup callback handler definitions for\n   * similarily structured resize events.\n   */\n\n\n  curryResizeHandler(position\n  /*: Position*/\n  , handler\n  /*: Function*/\n  )\n  /*: Function*/\n  {\n    return (e\n    /*: Event*/\n    , data\n    /*: ResizeCallbackData*/\n    ) =>\n    /*: Function*/\n    handler(e, data, position);\n  }\n  /**\n   * Mix a Resizable instance into a child.\n   * @param  {Element} child    Child element.\n   * @param  {Object} position  Position object (pixel values)\n   * @return {Element}          Child wrapped in Resizable.\n   */\n\n\n  mixinResizable(child\n  /*: ReactElement<any>*/\n  , position\n  /*: Position*/\n  , isResizable\n  /*: boolean*/\n  )\n  /*: ReactElement<any>*/\n  {\n    const {\n      cols,\n      minW,\n      minH,\n      maxW,\n      maxH,\n      transformScale,\n      resizeHandles,\n      resizeHandle\n    } = this.props;\n    const positionParams = this.getPositionParams(); // This is the max possible width - doesn't go to infinity because of the width of the window\n\n    const maxWidth = (0, _calculateUtils.calcGridItemPosition)(positionParams, 0, 0, cols, 0).width; // Calculate min/max constraints using our min & maxes\n\n    const mins = (0, _calculateUtils.calcGridItemPosition)(positionParams, 0, 0, minW, minH);\n    const maxes = (0, _calculateUtils.calcGridItemPosition)(positionParams, 0, 0, maxW, maxH);\n    const minConstraints = [mins.width, mins.height];\n    const maxConstraints = [Math.min(maxes.width, maxWidth), Math.min(maxes.height, Infinity)];\n    return /*#__PURE__*/_react.default.createElement(_reactResizable.Resizable // These are opts for the resize handle itself\n    , {\n      draggableOpts: {\n        disabled: !isResizable\n      },\n      className: isResizable ? undefined : \"react-resizable-hide\",\n      width: position.width,\n      height: position.height,\n      minConstraints: minConstraints,\n      maxConstraints: maxConstraints,\n      onResizeStop: this.curryResizeHandler(position, this.onResizeStop),\n      onResizeStart: this.curryResizeHandler(position, this.onResizeStart),\n      onResize: this.curryResizeHandler(position, this.onResize),\n      transformScale: transformScale,\n      resizeHandles: resizeHandles,\n      handle: resizeHandle\n    }, child);\n  }\n  /**\n   * Wrapper around resize events to provide more useful data.\n   */\n\n\n  onResizeHandler(e\n  /*: Event*/\n  , _ref4\n  /*:: */\n  , // 'size' is updated position\n  position\n  /*: Position*/\n  , // existing position\n  handlerName\n  /*: string*/\n  )\n  /*: void*/\n  {\n    let {\n      node,\n      size,\n      handle\n    }\n    /*: ResizeCallbackData*/\n    = _ref4\n    /*: ResizeCallbackData*/\n    ;\n    const handler = this.props[handlerName];\n    if (!handler) return;\n    const {\n      x,\n      y,\n      i,\n      maxH,\n      minH,\n      containerWidth\n    } = this.props;\n    const {\n      minW,\n      maxW\n    } = this.props; // Clamping of dimensions based on resize direction\n\n    let updatedSize = size;\n\n    if (node) {\n      updatedSize = (0, _utils.resizeItemInDirection)(handle, position, size, containerWidth);\n      this.setState({\n        resizing: handlerName === \"onResizeStop\" ? null : updatedSize\n      });\n    } // Get new XY based on pixel size\n\n\n    let {\n      w,\n      h\n    } = (0, _calculateUtils.calcWH)(this.getPositionParams(), updatedSize.width, updatedSize.height, x, y, handle); // Min/max capping.\n    // minW should be at least 1 (TODO propTypes validation?)\n\n    w = (0, _calculateUtils.clamp)(w, Math.max(minW, 1), maxW);\n    h = (0, _calculateUtils.clamp)(h, minH, maxH);\n    handler.call(this, i, w, h, {\n      e,\n      node,\n      size: updatedSize,\n      handle\n    });\n  }\n\n  render()\n  /*: ReactNode*/\n  {\n    const {\n      x,\n      y,\n      w,\n      h,\n      isDraggable,\n      isResizable,\n      droppingPosition,\n      useCSSTransforms\n    } = this.props;\n    const pos = (0, _calculateUtils.calcGridItemPosition)(this.getPositionParams(), x, y, w, h, this.state);\n\n    const child = _react.default.Children.only(this.props.children); // Create the child element. We clone the existing element but modify its className and style.\n\n\n    let newChild = /*#__PURE__*/_react.default.cloneElement(child, {\n      ref: this.elementRef,\n      className: (0, _clsx.default)(\"react-grid-item\", child.props.className, this.props.className, {\n        static: this.props.static,\n        resizing: Boolean(this.state.resizing),\n        \"react-draggable\": isDraggable,\n        \"react-draggable-dragging\": Boolean(this.state.dragging),\n        dropping: Boolean(droppingPosition),\n        cssTransforms: useCSSTransforms\n      }),\n      // We can set the width and height on the child, but unfortunately we can't set the position.\n      style: { ...this.props.style,\n        ...child.props.style,\n        ...this.createStyle(pos)\n      }\n    }); // Resizable support. This is usually on but the user can toggle it off.\n\n\n    newChild = this.mixinResizable(newChild, pos, isResizable); // Draggable support. This is always on, except for with placeholders.\n\n    newChild = this.mixinDraggable(newChild, isDraggable);\n    return newChild;\n  }\n\n}\n\nexports.default = GridItem;\n\n_defineProperty(GridItem, \"propTypes\", {\n  // Children must be only a single element\n  children: _propTypes.default.element,\n  // General grid attributes\n  cols: _propTypes.default.number.isRequired,\n  containerWidth: _propTypes.default.number.isRequired,\n  rowHeight: _propTypes.default.number.isRequired,\n  margin: _propTypes.default.array.isRequired,\n  maxRows: _propTypes.default.number.isRequired,\n  containerPadding: _propTypes.default.array.isRequired,\n  // These are all in grid units\n  x: _propTypes.default.number.isRequired,\n  y: _propTypes.default.number.isRequired,\n  w: _propTypes.default.number.isRequired,\n  h: _propTypes.default.number.isRequired,\n  // All optional\n  minW: function (props\n  /*: Props*/\n  , propName\n  /*: string*/\n  ) {\n    const value = props[propName];\n    if (typeof value !== \"number\") return new Error(\"minWidth not Number\");\n    if (value > props.w || value > props.maxW) return new Error(\"minWidth larger than item width/maxWidth\");\n  },\n  maxW: function (props\n  /*: Props*/\n  , propName\n  /*: string*/\n  ) {\n    const value = props[propName];\n    if (typeof value !== \"number\") return new Error(\"maxWidth not Number\");\n    if (value < props.w || value < props.minW) return new Error(\"maxWidth smaller than item width/minWidth\");\n  },\n  minH: function (props\n  /*: Props*/\n  , propName\n  /*: string*/\n  ) {\n    const value = props[propName];\n    if (typeof value !== \"number\") return new Error(\"minHeight not Number\");\n    if (value > props.h || value > props.maxH) return new Error(\"minHeight larger than item height/maxHeight\");\n  },\n  maxH: function (props\n  /*: Props*/\n  , propName\n  /*: string*/\n  ) {\n    const value = props[propName];\n    if (typeof value !== \"number\") return new Error(\"maxHeight not Number\");\n    if (value < props.h || value < props.minH) return new Error(\"maxHeight smaller than item height/minHeight\");\n  },\n  // ID is nice to have for callbacks\n  i: _propTypes.default.string.isRequired,\n  // Resize handle options\n  resizeHandles: _ReactGridLayoutPropTypes.resizeHandleAxesType,\n  resizeHandle: _ReactGridLayoutPropTypes.resizeHandleType,\n  // Functions\n  onDragStop: _propTypes.default.func,\n  onDragStart: _propTypes.default.func,\n  onDrag: _propTypes.default.func,\n  onResizeStop: _propTypes.default.func,\n  onResizeStart: _propTypes.default.func,\n  onResize: _propTypes.default.func,\n  // Flags\n  isDraggable: _propTypes.default.bool.isRequired,\n  isResizable: _propTypes.default.bool.isRequired,\n  isBounded: _propTypes.default.bool.isRequired,\n  static: _propTypes.default.bool,\n  // Use CSS transforms instead of top/left\n  useCSSTransforms: _propTypes.default.bool.isRequired,\n  transformScale: _propTypes.default.number,\n  // Others\n  className: _propTypes.default.string,\n  // Selector for draggable handle\n  handle: _propTypes.default.string,\n  // Selector for draggable cancel (see react-draggable)\n  cancel: _propTypes.default.string,\n  // Current position of a dropping element\n  droppingPosition: _propTypes.default.shape({\n    e: _propTypes.default.object.isRequired,\n    left: _propTypes.default.number.isRequired,\n    top: _propTypes.default.number.isRequired\n  })\n});\n\n_defineProperty(GridItem, \"defaultProps\", {\n  className: \"\",\n  cancel: \"\",\n  handle: \"\",\n  minH: 1,\n  minW: 1,\n  maxH: Infinity,\n  maxW: Infinity,\n  transformScale: 1\n});","map":{"version":3,"sources":["/Users/viviengeschwind/Projects/Website/website-professional/node_modules/react-grid-layout/build/GridItem.js"],"names":["Object","defineProperty","exports","value","default","_react","_interopRequireDefault","require","_propTypes","_reactDraggable","_reactResizable","_utils","_calculateUtils","_ReactGridLayoutPropTypes","_clsx","obj","__esModule","_defineProperty","key","_toPropertyKey","enumerable","configurable","writable","arg","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","undefined","res","call","TypeError","Number","GridItem","Component","constructor","arguments","resizing","dragging","className","createRef","e","_ref","node","onDragStart","transformScale","props","newPosition","top","left","offsetParent","parentRect","getBoundingClientRect","clientRect","cLeft","pLeft","cTop","pTop","scrollLeft","scrollTop","setState","x","y","calcXY","getPositionParams","w","h","i","_ref2","deltaX","deltaY","onDrag","state","Error","isBounded","containerWidth","positionParams","margin","rowHeight","bottomBoundary","clientHeight","calcGridItemWHPx","clamp","colWidth","calcGridColWidth","rightBoundary","_ref3","onDragStop","callbackData","position","onResizeHandler","shouldComponentUpdate","nextProps","nextState","children","droppingPosition","oldPosition","calcGridItemPosition","fastPositionEqual","useCSSTransforms","componentDidMount","moveDroppingItem","componentDidUpdate","prevProps","elementRef","current","prevDroppingPosition","shouldDrag","length","cols","containerPadding","maxRows","createStyle","pos","usePercentages","style","setTransform","setTopLeft","perc","width","mixinDraggable","child","isDraggable","createElement","DraggableCore","disabled","onStart","onStop","handle","cancel","scale","nodeRef","curryResizeHandler","handler","data","mixinResizable","isResizable","minW","minH","maxW","maxH","resizeHandles","resizeHandle","maxWidth","mins","maxes","minConstraints","height","maxConstraints","Math","min","Infinity","Resizable","draggableOpts","onResizeStop","onResizeStart","onResize","_ref4","handlerName","size","updatedSize","resizeItemInDirection","calcWH","max","render","Children","only","newChild","cloneElement","ref","static","Boolean","dropping","cssTransforms","element","number","isRequired","array","propName","string","resizeHandleAxesType","resizeHandleType","func","bool","shape","object"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\nvar _reactDraggable = require(\"react-draggable\");\nvar _reactResizable = require(\"react-resizable\");\nvar _utils = require(\"./utils\");\nvar _calculateUtils = require(\"./calculateUtils\");\nvar _ReactGridLayoutPropTypes = require(\"./ReactGridLayoutPropTypes\");\nvar _clsx = _interopRequireDefault(require(\"clsx\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n/*:: import type { Element as ReactElement, Node as ReactNode } from \"react\";*/\n/*:: import type {\n  ReactDraggableCallbackData,\n  GridDragEvent,\n  GridResizeEvent,\n  DroppingPosition,\n  Position,\n  ResizeHandleAxis\n} from \"./utils\";*/\n/*:: import type { PositionParams } from \"./calculateUtils\";*/\n/*:: import type { ResizeHandle, ReactRef } from \"./ReactGridLayoutPropTypes\";*/\n/*:: type PartialPosition = { top: number, left: number };*/\n/*:: type GridItemCallback<Data: GridDragEvent | GridResizeEvent> = (\n  i: string,\n  w: number,\n  h: number,\n  Data\n) => void;*/\n/*:: type ResizeCallbackData = {\n  node: HTMLElement,\n  size: Position,\n  handle: ResizeHandleAxis\n};*/\n/*:: type GridItemResizeCallback = (\n  e: Event,\n  data: ResizeCallbackData,\n  position: Position\n) => void;*/\n/*:: type State = {\n  resizing: ?{ top: number, left: number, width: number, height: number },\n  dragging: ?{ top: number, left: number },\n  className: string\n};*/\n/*:: type Props = {\n  children: ReactElement<any>,\n  cols: number,\n  containerWidth: number,\n  margin: [number, number],\n  containerPadding: [number, number],\n  rowHeight: number,\n  maxRows: number,\n  isDraggable: boolean,\n  isResizable: boolean,\n  isBounded: boolean,\n  static?: boolean,\n  useCSSTransforms?: boolean,\n  usePercentages?: boolean,\n  transformScale: number,\n  droppingPosition?: DroppingPosition,\n\n  className: string,\n  style?: Object,\n  // Draggability\n  cancel: string,\n  handle: string,\n\n  x: number,\n  y: number,\n  w: number,\n  h: number,\n\n  minW: number,\n  maxW: number,\n  minH: number,\n  maxH: number,\n  i: string,\n\n  resizeHandles?: ResizeHandleAxis[],\n  resizeHandle?: ResizeHandle,\n\n  onDrag?: GridItemCallback<GridDragEvent>,\n  onDragStart?: GridItemCallback<GridDragEvent>,\n  onDragStop?: GridItemCallback<GridDragEvent>,\n  onResize?: GridItemCallback<GridResizeEvent>,\n  onResizeStart?: GridItemCallback<GridResizeEvent>,\n  onResizeStop?: GridItemCallback<GridResizeEvent>\n};*/\n/*:: type DefaultProps = {\n  className: string,\n  cancel: string,\n  handle: string,\n  minH: number,\n  minW: number,\n  maxH: number,\n  maxW: number,\n  transformScale: number\n};*/\n/**\n * An individual item within a ReactGridLayout.\n */\nclass GridItem extends _react.default.Component /*:: <Props, State>*/{\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"state\", {\n      resizing: null,\n      dragging: null,\n      className: \"\"\n    });\n    _defineProperty(this, \"elementRef\", /*#__PURE__*/_react.default.createRef());\n    /**\n     * onDragStart event handler\n     * @param  {Event}  e             event data\n     * @param  {Object} callbackData  an object with node, delta and position information\n     */\n    _defineProperty(this, \"onDragStart\", (e, _ref) => {\n      let {\n        node\n      } = _ref;\n      const {\n        onDragStart,\n        transformScale\n      } = this.props;\n      if (!onDragStart) return;\n      const newPosition /*: PartialPosition*/ = {\n        top: 0,\n        left: 0\n      };\n\n      // TODO: this wont work on nested parents\n      const {\n        offsetParent\n      } = node;\n      if (!offsetParent) return;\n      const parentRect = offsetParent.getBoundingClientRect();\n      const clientRect = node.getBoundingClientRect();\n      const cLeft = clientRect.left / transformScale;\n      const pLeft = parentRect.left / transformScale;\n      const cTop = clientRect.top / transformScale;\n      const pTop = parentRect.top / transformScale;\n      newPosition.left = cLeft - pLeft + offsetParent.scrollLeft;\n      newPosition.top = cTop - pTop + offsetParent.scrollTop;\n      this.setState({\n        dragging: newPosition\n      });\n\n      // Call callback with this data\n      const {\n        x,\n        y\n      } = (0, _calculateUtils.calcXY)(this.getPositionParams(), newPosition.top, newPosition.left, this.props.w, this.props.h);\n      return onDragStart.call(this, this.props.i, x, y, {\n        e,\n        node,\n        newPosition\n      });\n    });\n    /**\n     * onDrag event handler\n     * @param  {Event}  e             event data\n     * @param  {Object} callbackData  an object with node, delta and position information\n     */\n    _defineProperty(this, \"onDrag\", (e, _ref2) => {\n      let {\n        node,\n        deltaX,\n        deltaY\n      } = _ref2;\n      const {\n        onDrag\n      } = this.props;\n      if (!onDrag) return;\n      if (!this.state.dragging) {\n        throw new Error(\"onDrag called before onDragStart.\");\n      }\n      let top = this.state.dragging.top + deltaY;\n      let left = this.state.dragging.left + deltaX;\n      const {\n        isBounded,\n        i,\n        w,\n        h,\n        containerWidth\n      } = this.props;\n      const positionParams = this.getPositionParams();\n\n      // Boundary calculations; keeps items within the grid\n      if (isBounded) {\n        const {\n          offsetParent\n        } = node;\n        if (offsetParent) {\n          const {\n            margin,\n            rowHeight\n          } = this.props;\n          const bottomBoundary = offsetParent.clientHeight - (0, _calculateUtils.calcGridItemWHPx)(h, rowHeight, margin[1]);\n          top = (0, _calculateUtils.clamp)(top, 0, bottomBoundary);\n          const colWidth = (0, _calculateUtils.calcGridColWidth)(positionParams);\n          const rightBoundary = containerWidth - (0, _calculateUtils.calcGridItemWHPx)(w, colWidth, margin[0]);\n          left = (0, _calculateUtils.clamp)(left, 0, rightBoundary);\n        }\n      }\n      const newPosition /*: PartialPosition*/ = {\n        top,\n        left\n      };\n      this.setState({\n        dragging: newPosition\n      });\n\n      // Call callback with this data\n      const {\n        x,\n        y\n      } = (0, _calculateUtils.calcXY)(positionParams, top, left, w, h);\n      return onDrag.call(this, i, x, y, {\n        e,\n        node,\n        newPosition\n      });\n    });\n    /**\n     * onDragStop event handler\n     * @param  {Event}  e             event data\n     * @param  {Object} callbackData  an object with node, delta and position information\n     */\n    _defineProperty(this, \"onDragStop\", (e, _ref3) => {\n      let {\n        node\n      } = _ref3;\n      const {\n        onDragStop\n      } = this.props;\n      if (!onDragStop) return;\n      if (!this.state.dragging) {\n        throw new Error(\"onDragEnd called before onDragStart.\");\n      }\n      const {\n        w,\n        h,\n        i\n      } = this.props;\n      const {\n        left,\n        top\n      } = this.state.dragging;\n      const newPosition /*: PartialPosition*/ = {\n        top,\n        left\n      };\n      this.setState({\n        dragging: null\n      });\n      const {\n        x,\n        y\n      } = (0, _calculateUtils.calcXY)(this.getPositionParams(), top, left, w, h);\n      return onDragStop.call(this, i, x, y, {\n        e,\n        node,\n        newPosition\n      });\n    });\n    /**\n     * onResizeStop event handler\n     * @param  {Event}  e             event data\n     * @param  {Object} callbackData  an object with node and size information\n     */\n    _defineProperty(this, \"onResizeStop\", (e, callbackData, position) => this.onResizeHandler(e, callbackData, position, \"onResizeStop\"));\n    // onResizeStart event handler\n    _defineProperty(this, \"onResizeStart\", (e, callbackData, position) => this.onResizeHandler(e, callbackData, position, \"onResizeStart\"));\n    // onResize event handler\n    _defineProperty(this, \"onResize\", (e, callbackData, position) => this.onResizeHandler(e, callbackData, position, \"onResize\"));\n  }\n  shouldComponentUpdate(nextProps /*: Props*/, nextState /*: State*/) /*: boolean*/{\n    // We can't deeply compare children. If the developer memoizes them, we can\n    // use this optimization.\n    if (this.props.children !== nextProps.children) return true;\n    if (this.props.droppingPosition !== nextProps.droppingPosition) return true;\n    // TODO memoize these calculations so they don't take so long?\n    const oldPosition = (0, _calculateUtils.calcGridItemPosition)(this.getPositionParams(this.props), this.props.x, this.props.y, this.props.w, this.props.h, this.state);\n    const newPosition = (0, _calculateUtils.calcGridItemPosition)(this.getPositionParams(nextProps), nextProps.x, nextProps.y, nextProps.w, nextProps.h, nextState);\n    return !(0, _utils.fastPositionEqual)(oldPosition, newPosition) || this.props.useCSSTransforms !== nextProps.useCSSTransforms;\n  }\n  componentDidMount() {\n    this.moveDroppingItem({});\n  }\n  componentDidUpdate(prevProps /*: Props*/) {\n    this.moveDroppingItem(prevProps);\n  }\n\n  // When a droppingPosition is present, this means we should fire a move event, as if we had moved\n  // this element by `x, y` pixels.\n  moveDroppingItem(prevProps /*: Props*/) {\n    const {\n      droppingPosition\n    } = this.props;\n    if (!droppingPosition) return;\n    const node = this.elementRef.current;\n    // Can't find DOM node (are we unmounted?)\n    if (!node) return;\n    const prevDroppingPosition = prevProps.droppingPosition || {\n      left: 0,\n      top: 0\n    };\n    const {\n      dragging\n    } = this.state;\n    const shouldDrag = dragging && droppingPosition.left !== prevDroppingPosition.left || droppingPosition.top !== prevDroppingPosition.top;\n    if (!dragging) {\n      this.onDragStart(droppingPosition.e, {\n        node,\n        deltaX: droppingPosition.left,\n        deltaY: droppingPosition.top\n      });\n    } else if (shouldDrag) {\n      const deltaX = droppingPosition.left - dragging.left;\n      const deltaY = droppingPosition.top - dragging.top;\n      this.onDrag(droppingPosition.e, {\n        node,\n        deltaX,\n        deltaY\n      });\n    }\n  }\n  getPositionParams() /*: PositionParams*/{\n    let props /*: Props*/ = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n    return {\n      cols: props.cols,\n      containerPadding: props.containerPadding,\n      containerWidth: props.containerWidth,\n      margin: props.margin,\n      maxRows: props.maxRows,\n      rowHeight: props.rowHeight\n    };\n  }\n\n  /**\n   * This is where we set the grid item's absolute placement. It gets a little tricky because we want to do it\n   * well when server rendering, and the only way to do that properly is to use percentage width/left because\n   * we don't know exactly what the browser viewport is.\n   * Unfortunately, CSS Transforms, which are great for performance, break in this instance because a percentage\n   * left is relative to the item itself, not its container! So we cannot use them on the server rendering pass.\n   *\n   * @param  {Object} pos Position object with width, height, left, top.\n   * @return {Object}     Style object.\n   */\n  createStyle(pos /*: Position*/) /*: { [key: string]: ?string }*/{\n    const {\n      usePercentages,\n      containerWidth,\n      useCSSTransforms\n    } = this.props;\n    let style;\n    // CSS Transforms support (default)\n    if (useCSSTransforms) {\n      style = (0, _utils.setTransform)(pos);\n    } else {\n      // top,left (slow)\n      style = (0, _utils.setTopLeft)(pos);\n\n      // This is used for server rendering.\n      if (usePercentages) {\n        style.left = (0, _utils.perc)(pos.left / containerWidth);\n        style.width = (0, _utils.perc)(pos.width / containerWidth);\n      }\n    }\n    return style;\n  }\n\n  /**\n   * Mix a Draggable instance into a child.\n   * @param  {Element} child    Child element.\n   * @return {Element}          Child wrapped in Draggable.\n   */\n  mixinDraggable(child /*: ReactElement<any>*/, isDraggable /*: boolean*/) /*: ReactElement<any>*/{\n    return /*#__PURE__*/_react.default.createElement(_reactDraggable.DraggableCore, {\n      disabled: !isDraggable,\n      onStart: this.onDragStart,\n      onDrag: this.onDrag,\n      onStop: this.onDragStop,\n      handle: this.props.handle,\n      cancel: \".react-resizable-handle\" + (this.props.cancel ? \",\" + this.props.cancel : \"\"),\n      scale: this.props.transformScale,\n      nodeRef: this.elementRef\n    }, child);\n  }\n\n  /**\n   * Utility function to setup callback handler definitions for\n   * similarily structured resize events.\n   */\n  curryResizeHandler(position /*: Position*/, handler /*: Function*/) /*: Function*/{\n    return (e /*: Event*/, data /*: ResizeCallbackData*/) => /*: Function*/handler(e, data, position);\n  }\n\n  /**\n   * Mix a Resizable instance into a child.\n   * @param  {Element} child    Child element.\n   * @param  {Object} position  Position object (pixel values)\n   * @return {Element}          Child wrapped in Resizable.\n   */\n  mixinResizable(child /*: ReactElement<any>*/, position /*: Position*/, isResizable /*: boolean*/) /*: ReactElement<any>*/{\n    const {\n      cols,\n      minW,\n      minH,\n      maxW,\n      maxH,\n      transformScale,\n      resizeHandles,\n      resizeHandle\n    } = this.props;\n    const positionParams = this.getPositionParams();\n\n    // This is the max possible width - doesn't go to infinity because of the width of the window\n    const maxWidth = (0, _calculateUtils.calcGridItemPosition)(positionParams, 0, 0, cols, 0).width;\n\n    // Calculate min/max constraints using our min & maxes\n    const mins = (0, _calculateUtils.calcGridItemPosition)(positionParams, 0, 0, minW, minH);\n    const maxes = (0, _calculateUtils.calcGridItemPosition)(positionParams, 0, 0, maxW, maxH);\n    const minConstraints = [mins.width, mins.height];\n    const maxConstraints = [Math.min(maxes.width, maxWidth), Math.min(maxes.height, Infinity)];\n    return /*#__PURE__*/_react.default.createElement(_reactResizable.Resizable\n    // These are opts for the resize handle itself\n    , {\n      draggableOpts: {\n        disabled: !isResizable\n      },\n      className: isResizable ? undefined : \"react-resizable-hide\",\n      width: position.width,\n      height: position.height,\n      minConstraints: minConstraints,\n      maxConstraints: maxConstraints,\n      onResizeStop: this.curryResizeHandler(position, this.onResizeStop),\n      onResizeStart: this.curryResizeHandler(position, this.onResizeStart),\n      onResize: this.curryResizeHandler(position, this.onResize),\n      transformScale: transformScale,\n      resizeHandles: resizeHandles,\n      handle: resizeHandle\n    }, child);\n  }\n  /**\n   * Wrapper around resize events to provide more useful data.\n   */\n  onResizeHandler(e /*: Event*/, _ref4 /*:: */,\n  // 'size' is updated position\n  position /*: Position*/,\n  // existing position\n  handlerName /*: string*/) /*: void*/{\n    let {\n      node,\n      size,\n      handle\n    } /*: ResizeCallbackData*/ = _ref4 /*: ResizeCallbackData*/;\n    const handler = this.props[handlerName];\n    if (!handler) return;\n    const {\n      x,\n      y,\n      i,\n      maxH,\n      minH,\n      containerWidth\n    } = this.props;\n    const {\n      minW,\n      maxW\n    } = this.props;\n\n    // Clamping of dimensions based on resize direction\n    let updatedSize = size;\n    if (node) {\n      updatedSize = (0, _utils.resizeItemInDirection)(handle, position, size, containerWidth);\n      this.setState({\n        resizing: handlerName === \"onResizeStop\" ? null : updatedSize\n      });\n    }\n\n    // Get new XY based on pixel size\n    let {\n      w,\n      h\n    } = (0, _calculateUtils.calcWH)(this.getPositionParams(), updatedSize.width, updatedSize.height, x, y, handle);\n\n    // Min/max capping.\n    // minW should be at least 1 (TODO propTypes validation?)\n    w = (0, _calculateUtils.clamp)(w, Math.max(minW, 1), maxW);\n    h = (0, _calculateUtils.clamp)(h, minH, maxH);\n    handler.call(this, i, w, h, {\n      e,\n      node,\n      size: updatedSize,\n      handle\n    });\n  }\n  render() /*: ReactNode*/{\n    const {\n      x,\n      y,\n      w,\n      h,\n      isDraggable,\n      isResizable,\n      droppingPosition,\n      useCSSTransforms\n    } = this.props;\n    const pos = (0, _calculateUtils.calcGridItemPosition)(this.getPositionParams(), x, y, w, h, this.state);\n    const child = _react.default.Children.only(this.props.children);\n\n    // Create the child element. We clone the existing element but modify its className and style.\n    let newChild = /*#__PURE__*/_react.default.cloneElement(child, {\n      ref: this.elementRef,\n      className: (0, _clsx.default)(\"react-grid-item\", child.props.className, this.props.className, {\n        static: this.props.static,\n        resizing: Boolean(this.state.resizing),\n        \"react-draggable\": isDraggable,\n        \"react-draggable-dragging\": Boolean(this.state.dragging),\n        dropping: Boolean(droppingPosition),\n        cssTransforms: useCSSTransforms\n      }),\n      // We can set the width and height on the child, but unfortunately we can't set the position.\n      style: {\n        ...this.props.style,\n        ...child.props.style,\n        ...this.createStyle(pos)\n      }\n    });\n\n    // Resizable support. This is usually on but the user can toggle it off.\n    newChild = this.mixinResizable(newChild, pos, isResizable);\n\n    // Draggable support. This is always on, except for with placeholders.\n    newChild = this.mixinDraggable(newChild, isDraggable);\n    return newChild;\n  }\n}\nexports.default = GridItem;\n_defineProperty(GridItem, \"propTypes\", {\n  // Children must be only a single element\n  children: _propTypes.default.element,\n  // General grid attributes\n  cols: _propTypes.default.number.isRequired,\n  containerWidth: _propTypes.default.number.isRequired,\n  rowHeight: _propTypes.default.number.isRequired,\n  margin: _propTypes.default.array.isRequired,\n  maxRows: _propTypes.default.number.isRequired,\n  containerPadding: _propTypes.default.array.isRequired,\n  // These are all in grid units\n  x: _propTypes.default.number.isRequired,\n  y: _propTypes.default.number.isRequired,\n  w: _propTypes.default.number.isRequired,\n  h: _propTypes.default.number.isRequired,\n  // All optional\n  minW: function (props /*: Props*/, propName /*: string*/) {\n    const value = props[propName];\n    if (typeof value !== \"number\") return new Error(\"minWidth not Number\");\n    if (value > props.w || value > props.maxW) return new Error(\"minWidth larger than item width/maxWidth\");\n  },\n  maxW: function (props /*: Props*/, propName /*: string*/) {\n    const value = props[propName];\n    if (typeof value !== \"number\") return new Error(\"maxWidth not Number\");\n    if (value < props.w || value < props.minW) return new Error(\"maxWidth smaller than item width/minWidth\");\n  },\n  minH: function (props /*: Props*/, propName /*: string*/) {\n    const value = props[propName];\n    if (typeof value !== \"number\") return new Error(\"minHeight not Number\");\n    if (value > props.h || value > props.maxH) return new Error(\"minHeight larger than item height/maxHeight\");\n  },\n  maxH: function (props /*: Props*/, propName /*: string*/) {\n    const value = props[propName];\n    if (typeof value !== \"number\") return new Error(\"maxHeight not Number\");\n    if (value < props.h || value < props.minH) return new Error(\"maxHeight smaller than item height/minHeight\");\n  },\n  // ID is nice to have for callbacks\n  i: _propTypes.default.string.isRequired,\n  // Resize handle options\n  resizeHandles: _ReactGridLayoutPropTypes.resizeHandleAxesType,\n  resizeHandle: _ReactGridLayoutPropTypes.resizeHandleType,\n  // Functions\n  onDragStop: _propTypes.default.func,\n  onDragStart: _propTypes.default.func,\n  onDrag: _propTypes.default.func,\n  onResizeStop: _propTypes.default.func,\n  onResizeStart: _propTypes.default.func,\n  onResize: _propTypes.default.func,\n  // Flags\n  isDraggable: _propTypes.default.bool.isRequired,\n  isResizable: _propTypes.default.bool.isRequired,\n  isBounded: _propTypes.default.bool.isRequired,\n  static: _propTypes.default.bool,\n  // Use CSS transforms instead of top/left\n  useCSSTransforms: _propTypes.default.bool.isRequired,\n  transformScale: _propTypes.default.number,\n  // Others\n  className: _propTypes.default.string,\n  // Selector for draggable handle\n  handle: _propTypes.default.string,\n  // Selector for draggable cancel (see react-draggable)\n  cancel: _propTypes.default.string,\n  // Current position of a dropping element\n  droppingPosition: _propTypes.default.shape({\n    e: _propTypes.default.object.isRequired,\n    left: _propTypes.default.number.isRequired,\n    top: _propTypes.default.number.isRequired\n  })\n});\n_defineProperty(GridItem, \"defaultProps\", {\n  className: \"\",\n  cancel: \"\",\n  handle: \"\",\n  minH: 1,\n  minW: 1,\n  maxH: Infinity,\n  maxW: Infinity,\n  transformScale: 1\n});"]},"metadata":{},"sourceType":"script"}