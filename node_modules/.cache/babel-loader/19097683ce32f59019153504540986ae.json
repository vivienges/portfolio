{"ast":null,"code":"'use client';\n\nimport _slicedToArray from \"/Users/viviengeschwind/Projects/Website/website-professional/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"onChange\", \"maxRows\", \"minRows\", \"style\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport * as ReactDOM from 'react-dom';\nimport { unstable_debounce as debounce, unstable_useForkRef as useForkRef, unstable_useEnhancedEffect as useEnhancedEffect, unstable_ownerWindow as ownerWindow } from '@mui/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction getStyleValue(value) {\n  return parseInt(value, 10) || 0;\n}\n\nvar styles = {\n  shadow: {\n    // Visibility needed to hide the extra text area on iPads\n    visibility: 'hidden',\n    // Remove from the content flow\n    position: 'absolute',\n    // Ignore the scrollbar width\n    overflow: 'hidden',\n    height: 0,\n    top: 0,\n    left: 0,\n    // Create a new layer, increase the isolation of the computed values\n    transform: 'translateZ(0)'\n  }\n};\n\nfunction isEmpty(obj) {\n  return obj === undefined || obj === null || Object.keys(obj).length === 0 || obj.outerHeightStyle === 0 && !obj.overflow;\n}\n/**\n *\n * Demos:\n *\n * - [Textarea Autosize](https://mui.com/base-ui/react-textarea-autosize/)\n * - [Textarea Autosize](https://mui.com/material-ui/react-textarea-autosize/)\n *\n * API:\n *\n * - [TextareaAutosize API](https://mui.com/base-ui/react-textarea-autosize/components-api/#textarea-autosize)\n */\n\n\nvar TextareaAutosize = /*#__PURE__*/React.forwardRef(function TextareaAutosize(props, forwardedRef) {\n  var onChange = props.onChange,\n      maxRows = props.maxRows,\n      _props$minRows = props.minRows,\n      minRows = _props$minRows === void 0 ? 1 : _props$minRows,\n      style = props.style,\n      value = props.value,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var _React$useRef = React.useRef(value != null),\n      isControlled = _React$useRef.current;\n\n  var inputRef = React.useRef(null);\n  var handleRef = useForkRef(forwardedRef, inputRef);\n  var shadowRef = React.useRef(null);\n  var renders = React.useRef(0);\n\n  var _React$useState = React.useState({\n    outerHeightStyle: 0\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      state = _React$useState2[0],\n      setState = _React$useState2[1];\n\n  var getUpdatedState = React.useCallback(function () {\n    var input = inputRef.current;\n    var containerWindow = ownerWindow(input);\n    var computedStyle = containerWindow.getComputedStyle(input); // If input's width is shrunk and it's not visible, don't sync height.\n\n    if (computedStyle.width === '0px') {\n      return {\n        outerHeightStyle: 0\n      };\n    }\n\n    var inputShallow = shadowRef.current;\n    inputShallow.style.width = computedStyle.width;\n    inputShallow.value = input.value || props.placeholder || 'x';\n\n    if (inputShallow.value.slice(-1) === '\\n') {\n      // Certain fonts which overflow the line height will cause the textarea\n      // to report a different scrollHeight depending on whether the last line\n      // is empty. Make it non-empty to avoid this issue.\n      inputShallow.value += ' ';\n    }\n\n    var boxSizing = computedStyle.boxSizing;\n    var padding = getStyleValue(computedStyle.paddingBottom) + getStyleValue(computedStyle.paddingTop);\n    var border = getStyleValue(computedStyle.borderBottomWidth) + getStyleValue(computedStyle.borderTopWidth); // The height of the inner content\n\n    var innerHeight = inputShallow.scrollHeight; // Measure height of a textarea with a single row\n\n    inputShallow.value = 'x';\n    var singleRowHeight = inputShallow.scrollHeight; // The height of the outer content\n\n    var outerHeight = innerHeight;\n\n    if (minRows) {\n      outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);\n    }\n\n    if (maxRows) {\n      outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);\n    }\n\n    outerHeight = Math.max(outerHeight, singleRowHeight); // Take the box sizing into account for applying this value as a style.\n\n    var outerHeightStyle = outerHeight + (boxSizing === 'border-box' ? padding + border : 0);\n    var overflow = Math.abs(outerHeight - innerHeight) <= 1;\n    return {\n      outerHeightStyle: outerHeightStyle,\n      overflow: overflow\n    };\n  }, [maxRows, minRows, props.placeholder]);\n\n  var updateState = function updateState(prevState, newState) {\n    var outerHeightStyle = newState.outerHeightStyle,\n        overflow = newState.overflow; // Need a large enough difference to update the height.\n    // This prevents infinite rendering loop.\n\n    if (renders.current < 20 && (outerHeightStyle > 0 && Math.abs((prevState.outerHeightStyle || 0) - outerHeightStyle) > 1 || prevState.overflow !== overflow)) {\n      renders.current += 1;\n      return {\n        overflow: overflow,\n        outerHeightStyle: outerHeightStyle\n      };\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (renders.current === 20) {\n        console.error(['MUI: Too many re-renders. The layout is unstable.', 'TextareaAutosize limits the number of renders to prevent an infinite loop.'].join('\\n'));\n      }\n    }\n\n    return prevState;\n  };\n\n  var syncHeight = React.useCallback(function () {\n    var newState = getUpdatedState();\n\n    if (isEmpty(newState)) {\n      return;\n    }\n\n    setState(function (prevState) {\n      return updateState(prevState, newState);\n    });\n  }, [getUpdatedState]);\n  useEnhancedEffect(function () {\n    var syncHeightWithFlushSync = function syncHeightWithFlushSync() {\n      var newState = getUpdatedState();\n\n      if (isEmpty(newState)) {\n        return;\n      } // In React 18, state updates in a ResizeObserver's callback are happening after\n      // the paint, this leads to an infinite rendering.\n      //\n      // Using flushSync ensures that the states is updated before the next pain.\n      // Related issue - https://github.com/facebook/react/issues/24331\n\n\n      ReactDOM.flushSync(function () {\n        setState(function (prevState) {\n          return updateState(prevState, newState);\n        });\n      });\n    };\n\n    var handleResize = function handleResize() {\n      renders.current = 0;\n      syncHeightWithFlushSync();\n    }; // Workaround a \"ResizeObserver loop completed with undelivered notifications\" error\n    // in test.\n    // Note that we might need to use this logic in production per https://github.com/WICG/resize-observer/issues/38\n    // Also see https://github.com/mui/mui-x/issues/8733\n\n\n    var rAF;\n\n    var rAFHandleResize = function rAFHandleResize() {\n      cancelAnimationFrame(rAF);\n      rAF = requestAnimationFrame(function () {\n        handleResize();\n      });\n    };\n\n    var debounceHandleResize = debounce(handleResize);\n    var input = inputRef.current;\n    var containerWindow = ownerWindow(input);\n    containerWindow.addEventListener('resize', debounceHandleResize);\n    var resizeObserver;\n\n    if (typeof ResizeObserver !== 'undefined') {\n      resizeObserver = new ResizeObserver(process.env.NODE_ENV === 'test' ? rAFHandleResize : handleResize);\n      resizeObserver.observe(input);\n    }\n\n    return function () {\n      debounceHandleResize.clear();\n      cancelAnimationFrame(rAF);\n      containerWindow.removeEventListener('resize', debounceHandleResize);\n\n      if (resizeObserver) {\n        resizeObserver.disconnect();\n      }\n    };\n  }, [getUpdatedState]);\n  useEnhancedEffect(function () {\n    syncHeight();\n  });\n  React.useEffect(function () {\n    renders.current = 0;\n  }, [value]);\n\n  var handleChange = function handleChange(event) {\n    renders.current = 0;\n\n    if (!isControlled) {\n      syncHeight();\n    }\n\n    if (onChange) {\n      onChange(event);\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(\"textarea\", _extends({\n      value: value,\n      onChange: handleChange,\n      ref: handleRef // Apply the rows prop to get a \"correct\" first SSR paint\n      ,\n      rows: minRows,\n      style: _extends({\n        height: state.outerHeightStyle,\n        // Need a large enough difference to allow scrolling.\n        // This prevents infinite rendering loop.\n        overflow: state.overflow ? 'hidden' : undefined\n      }, style)\n    }, other)), /*#__PURE__*/_jsx(\"textarea\", {\n      \"aria-hidden\": true,\n      className: props.className,\n      readOnly: true,\n      ref: shadowRef,\n      tabIndex: -1,\n      style: _extends({}, styles.shadow, style, {\n        paddingTop: 0,\n        paddingBottom: 0\n      })\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? TextareaAutosize.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Maximum number of rows to display.\n   */\n  maxRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * Minimum number of rows to display.\n   * @default 1\n   */\n  minRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * @ignore\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  value: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.number, PropTypes.string])\n} : void 0;\nexport { TextareaAutosize };","map":{"version":3,"sources":["/Users/viviengeschwind/Projects/Website/website-professional/node_modules/@mui/base/TextareaAutosize/TextareaAutosize.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","ReactDOM","unstable_debounce","debounce","unstable_useForkRef","useForkRef","unstable_useEnhancedEffect","useEnhancedEffect","unstable_ownerWindow","ownerWindow","jsx","_jsx","jsxs","_jsxs","getStyleValue","value","parseInt","styles","shadow","visibility","position","overflow","height","top","left","transform","isEmpty","obj","undefined","Object","keys","length","outerHeightStyle","TextareaAutosize","forwardRef","props","forwardedRef","onChange","maxRows","minRows","style","other","useRef","isControlled","current","inputRef","handleRef","shadowRef","renders","useState","state","setState","getUpdatedState","useCallback","input","containerWindow","computedStyle","getComputedStyle","width","inputShallow","placeholder","slice","boxSizing","padding","paddingBottom","paddingTop","border","borderBottomWidth","borderTopWidth","innerHeight","scrollHeight","singleRowHeight","outerHeight","Math","max","Number","min","abs","updateState","prevState","newState","process","env","NODE_ENV","console","error","join","syncHeight","syncHeightWithFlushSync","flushSync","handleResize","rAF","rAFHandleResize","cancelAnimationFrame","requestAnimationFrame","debounceHandleResize","addEventListener","resizeObserver","ResizeObserver","observe","clear","removeEventListener","disconnect","useEffect","handleChange","event","Fragment","children","ref","rows","className","readOnly","tabIndex","propTypes","string","oneOfType","number","func","object","arrayOf"],"mappings":"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","sourcesContent":["'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"onChange\", \"maxRows\", \"minRows\", \"style\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport * as ReactDOM from 'react-dom';\nimport { unstable_debounce as debounce, unstable_useForkRef as useForkRef, unstable_useEnhancedEffect as useEnhancedEffect, unstable_ownerWindow as ownerWindow } from '@mui/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction getStyleValue(value) {\n  return parseInt(value, 10) || 0;\n}\nconst styles = {\n  shadow: {\n    // Visibility needed to hide the extra text area on iPads\n    visibility: 'hidden',\n    // Remove from the content flow\n    position: 'absolute',\n    // Ignore the scrollbar width\n    overflow: 'hidden',\n    height: 0,\n    top: 0,\n    left: 0,\n    // Create a new layer, increase the isolation of the computed values\n    transform: 'translateZ(0)'\n  }\n};\nfunction isEmpty(obj) {\n  return obj === undefined || obj === null || Object.keys(obj).length === 0 || obj.outerHeightStyle === 0 && !obj.overflow;\n}\n\n/**\n *\n * Demos:\n *\n * - [Textarea Autosize](https://mui.com/base-ui/react-textarea-autosize/)\n * - [Textarea Autosize](https://mui.com/material-ui/react-textarea-autosize/)\n *\n * API:\n *\n * - [TextareaAutosize API](https://mui.com/base-ui/react-textarea-autosize/components-api/#textarea-autosize)\n */\nconst TextareaAutosize = /*#__PURE__*/React.forwardRef(function TextareaAutosize(props, forwardedRef) {\n  const {\n      onChange,\n      maxRows,\n      minRows = 1,\n      style,\n      value\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const {\n    current: isControlled\n  } = React.useRef(value != null);\n  const inputRef = React.useRef(null);\n  const handleRef = useForkRef(forwardedRef, inputRef);\n  const shadowRef = React.useRef(null);\n  const renders = React.useRef(0);\n  const [state, setState] = React.useState({\n    outerHeightStyle: 0\n  });\n  const getUpdatedState = React.useCallback(() => {\n    const input = inputRef.current;\n    const containerWindow = ownerWindow(input);\n    const computedStyle = containerWindow.getComputedStyle(input);\n\n    // If input's width is shrunk and it's not visible, don't sync height.\n    if (computedStyle.width === '0px') {\n      return {\n        outerHeightStyle: 0\n      };\n    }\n    const inputShallow = shadowRef.current;\n    inputShallow.style.width = computedStyle.width;\n    inputShallow.value = input.value || props.placeholder || 'x';\n    if (inputShallow.value.slice(-1) === '\\n') {\n      // Certain fonts which overflow the line height will cause the textarea\n      // to report a different scrollHeight depending on whether the last line\n      // is empty. Make it non-empty to avoid this issue.\n      inputShallow.value += ' ';\n    }\n    const boxSizing = computedStyle.boxSizing;\n    const padding = getStyleValue(computedStyle.paddingBottom) + getStyleValue(computedStyle.paddingTop);\n    const border = getStyleValue(computedStyle.borderBottomWidth) + getStyleValue(computedStyle.borderTopWidth);\n\n    // The height of the inner content\n    const innerHeight = inputShallow.scrollHeight;\n\n    // Measure height of a textarea with a single row\n    inputShallow.value = 'x';\n    const singleRowHeight = inputShallow.scrollHeight;\n\n    // The height of the outer content\n    let outerHeight = innerHeight;\n    if (minRows) {\n      outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);\n    }\n    if (maxRows) {\n      outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);\n    }\n    outerHeight = Math.max(outerHeight, singleRowHeight);\n\n    // Take the box sizing into account for applying this value as a style.\n    const outerHeightStyle = outerHeight + (boxSizing === 'border-box' ? padding + border : 0);\n    const overflow = Math.abs(outerHeight - innerHeight) <= 1;\n    return {\n      outerHeightStyle,\n      overflow\n    };\n  }, [maxRows, minRows, props.placeholder]);\n  const updateState = (prevState, newState) => {\n    const {\n      outerHeightStyle,\n      overflow\n    } = newState;\n    // Need a large enough difference to update the height.\n    // This prevents infinite rendering loop.\n    if (renders.current < 20 && (outerHeightStyle > 0 && Math.abs((prevState.outerHeightStyle || 0) - outerHeightStyle) > 1 || prevState.overflow !== overflow)) {\n      renders.current += 1;\n      return {\n        overflow,\n        outerHeightStyle\n      };\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      if (renders.current === 20) {\n        console.error(['MUI: Too many re-renders. The layout is unstable.', 'TextareaAutosize limits the number of renders to prevent an infinite loop.'].join('\\n'));\n      }\n    }\n    return prevState;\n  };\n  const syncHeight = React.useCallback(() => {\n    const newState = getUpdatedState();\n    if (isEmpty(newState)) {\n      return;\n    }\n    setState(prevState => updateState(prevState, newState));\n  }, [getUpdatedState]);\n  useEnhancedEffect(() => {\n    const syncHeightWithFlushSync = () => {\n      const newState = getUpdatedState();\n      if (isEmpty(newState)) {\n        return;\n      }\n\n      // In React 18, state updates in a ResizeObserver's callback are happening after\n      // the paint, this leads to an infinite rendering.\n      //\n      // Using flushSync ensures that the states is updated before the next pain.\n      // Related issue - https://github.com/facebook/react/issues/24331\n      ReactDOM.flushSync(() => {\n        setState(prevState => updateState(prevState, newState));\n      });\n    };\n    const handleResize = () => {\n      renders.current = 0;\n      syncHeightWithFlushSync();\n    };\n    // Workaround a \"ResizeObserver loop completed with undelivered notifications\" error\n    // in test.\n    // Note that we might need to use this logic in production per https://github.com/WICG/resize-observer/issues/38\n    // Also see https://github.com/mui/mui-x/issues/8733\n    let rAF;\n    const rAFHandleResize = () => {\n      cancelAnimationFrame(rAF);\n      rAF = requestAnimationFrame(() => {\n        handleResize();\n      });\n    };\n    const debounceHandleResize = debounce(handleResize);\n    const input = inputRef.current;\n    const containerWindow = ownerWindow(input);\n    containerWindow.addEventListener('resize', debounceHandleResize);\n    let resizeObserver;\n    if (typeof ResizeObserver !== 'undefined') {\n      resizeObserver = new ResizeObserver(process.env.NODE_ENV === 'test' ? rAFHandleResize : handleResize);\n      resizeObserver.observe(input);\n    }\n    return () => {\n      debounceHandleResize.clear();\n      cancelAnimationFrame(rAF);\n      containerWindow.removeEventListener('resize', debounceHandleResize);\n      if (resizeObserver) {\n        resizeObserver.disconnect();\n      }\n    };\n  }, [getUpdatedState]);\n  useEnhancedEffect(() => {\n    syncHeight();\n  });\n  React.useEffect(() => {\n    renders.current = 0;\n  }, [value]);\n  const handleChange = event => {\n    renders.current = 0;\n    if (!isControlled) {\n      syncHeight();\n    }\n    if (onChange) {\n      onChange(event);\n    }\n  };\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(\"textarea\", _extends({\n      value: value,\n      onChange: handleChange,\n      ref: handleRef\n      // Apply the rows prop to get a \"correct\" first SSR paint\n      ,\n      rows: minRows,\n      style: _extends({\n        height: state.outerHeightStyle,\n        // Need a large enough difference to allow scrolling.\n        // This prevents infinite rendering loop.\n        overflow: state.overflow ? 'hidden' : undefined\n      }, style)\n    }, other)), /*#__PURE__*/_jsx(\"textarea\", {\n      \"aria-hidden\": true,\n      className: props.className,\n      readOnly: true,\n      ref: shadowRef,\n      tabIndex: -1,\n      style: _extends({}, styles.shadow, style, {\n        paddingTop: 0,\n        paddingBottom: 0\n      })\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? TextareaAutosize.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * Maximum number of rows to display.\n   */\n  maxRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * Minimum number of rows to display.\n   * @default 1\n   */\n  minRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * @ignore\n   */\n  onChange: PropTypes.func,\n  /**\n   * @ignore\n   */\n  placeholder: PropTypes.string,\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n  /**\n   * @ignore\n   */\n  value: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.number, PropTypes.string])\n} : void 0;\nexport { TextareaAutosize };"]},"metadata":{},"sourceType":"module"}