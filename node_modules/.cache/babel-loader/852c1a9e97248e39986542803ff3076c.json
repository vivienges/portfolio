{"ast":null,"code":"'use client';\n\nimport _slicedToArray from \"/Users/viviengeschwind/Projects/Website/website-professional/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"defaultValue\", \"children\", \"disabled\", \"error\", \"onChange\", \"required\", \"slotProps\", \"slots\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport useControlled from '@mui/utils/useControlled';\nimport { FormControlContext } from './FormControlContext';\nimport { getFormControlUtilityClass } from './formControlClasses';\nimport { useSlotProps } from '../utils';\nimport { unstable_composeClasses as composeClasses } from '../composeClasses';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction hasValue(value) {\n  return value != null && !(Array.isArray(value) && value.length === 0) && value !== '';\n}\n\nfunction useUtilityClasses(ownerState) {\n  var disabled = ownerState.disabled,\n      error = ownerState.error,\n      filled = ownerState.filled,\n      focused = ownerState.focused,\n      required = ownerState.required;\n  var slots = {\n    root: ['root', disabled && 'disabled', focused && 'focused', error && 'error', filled && 'filled', required && 'required']\n  };\n  return composeClasses(slots, useClassNamesOverride(getFormControlUtilityClass));\n}\n/**\n * Provides context such as filled/focused/error/required for form inputs.\n * Relying on the context provides high flexibility and ensures that the state always stays\n * consistent across the children of the `FormControl`.\n * This context is used by the following components:\n *\n * *   FormLabel\n * *   FormHelperText\n * *   Input\n * *   InputLabel\n *\n * You can find one composition example below and more going to [the demos](https://mui.com/material-ui/react-text-field/#components).\n *\n * ```jsx\n * <FormControl>\n *   <InputLabel htmlFor=\"my-input\">Email address</InputLabel>\n *   <Input id=\"my-input\" aria-describedby=\"my-helper-text\" />\n *   <FormHelperText id=\"my-helper-text\">We'll never share your email.</FormHelperText>\n * </FormControl>\n * ```\n *\n * ⚠️ Only one `Input` can be used within a FormControl because it create visual inconsistencies.\n * For instance, only one input can be focused at the same time, the state shouldn't be shared.\n *\n * Demos:\n *\n * - [Form Control](https://mui.com/base-ui/react-form-control/)\n * - [Input](https://mui.com/joy-ui/react-input/)\n * - [Checkbox](https://mui.com/material-ui/react-checkbox/)\n * - [Radio Group](https://mui.com/material-ui/react-radio-button/)\n * - [Switch](https://mui.com/material-ui/react-switch/)\n * - [Text Field](https://mui.com/material-ui/react-text-field/)\n *\n * API:\n *\n * - [FormControl API](https://mui.com/base-ui/react-form-control/components-api/#form-control)\n */\n\n\nvar FormControl = /*#__PURE__*/React.forwardRef(function FormControl(props, forwardedRef) {\n  var _slots$root;\n\n  var defaultValue = props.defaultValue,\n      children = props.children,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$error = props.error,\n      error = _props$error === void 0 ? false : _props$error,\n      _onChange = props.onChange,\n      _props$required = props.required,\n      required = _props$required === void 0 ? false : _props$required,\n      _props$slotProps = props.slotProps,\n      slotProps = _props$slotProps === void 0 ? {} : _props$slotProps,\n      _props$slots = props.slots,\n      slots = _props$slots === void 0 ? {} : _props$slots,\n      incomingValue = props.value,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var _useControlled = useControlled({\n    controlled: incomingValue,\n    default: defaultValue,\n    name: 'FormControl',\n    state: 'value'\n  }),\n      _useControlled2 = _slicedToArray(_useControlled, 2),\n      value = _useControlled2[0],\n      setValue = _useControlled2[1];\n\n  var filled = hasValue(value);\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      focusedState = _React$useState2[0],\n      setFocused = _React$useState2[1];\n\n  var focused = focusedState && !disabled;\n  React.useEffect(function () {\n    return setFocused(function (isFocused) {\n      return disabled ? false : isFocused;\n    });\n  }, [disabled]);\n\n  var ownerState = _extends({}, props, {\n    disabled: disabled,\n    error: error,\n    filled: filled,\n    focused: focused,\n    required: required\n  });\n\n  var childContext = React.useMemo(function () {\n    return {\n      disabled: disabled,\n      error: error,\n      filled: filled,\n      focused: focused,\n      onBlur: function onBlur() {\n        setFocused(false);\n      },\n      onChange: function onChange(event) {\n        setValue(event.target.value);\n        _onChange == null || _onChange(event);\n      },\n      onFocus: function onFocus() {\n        setFocused(true);\n      },\n      required: required,\n      value: value != null ? value : ''\n    };\n  }, [disabled, error, filled, focused, _onChange, required, setValue, value]);\n  var classes = useUtilityClasses(ownerState);\n\n  var renderChildren = function renderChildren() {\n    if (typeof children === 'function') {\n      return children(childContext);\n    }\n\n    return children;\n  };\n\n  var Root = (_slots$root = slots.root) != null ? _slots$root : 'div';\n  var rootProps = useSlotProps({\n    elementType: Root,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      ref: forwardedRef,\n      children: renderChildren()\n    },\n    ownerState: ownerState,\n    className: classes.root\n  });\n  return /*#__PURE__*/_jsx(FormControlContext.Provider, {\n    value: childContext,\n    children: /*#__PURE__*/_jsx(Root, _extends({}, rootProps))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? FormControl.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.node, PropTypes.func]),\n\n  /**\n   * Class name applied to the root element.\n   */\n  className: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, the label, input and helper text should be displayed in a disabled state.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the label is displayed in an error state.\n   * @default false\n   */\n  error: PropTypes.bool,\n\n  /**\n   * Callback fired when the form element's value is modified.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * If `true`, the label will indicate that the `input` is required.\n   * @default false\n   */\n  required: PropTypes.bool,\n\n  /**\n   * The props used for each slot inside the FormControl.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n\n  /**\n   * The components used for each slot inside the FormControl.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  }),\n\n  /**\n   * The value of the form element.\n   */\n  value: PropTypes.any\n} : void 0;\nexport { FormControl };","map":{"version":3,"sources":["/Users/viviengeschwind/Projects/Website/website-professional/node_modules/@mui/base/FormControl/FormControl.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","useControlled","FormControlContext","getFormControlUtilityClass","useSlotProps","unstable_composeClasses","composeClasses","useClassNamesOverride","jsx","_jsx","hasValue","value","Array","isArray","length","useUtilityClasses","ownerState","disabled","error","filled","focused","required","slots","root","FormControl","forwardRef","props","forwardedRef","_slots$root","defaultValue","children","onChange","slotProps","incomingValue","other","controlled","default","name","state","setValue","useState","focusedState","setFocused","useEffect","isFocused","childContext","useMemo","onBlur","event","target","onFocus","classes","renderChildren","Root","rootProps","elementType","externalSlotProps","externalForwardedProps","additionalProps","ref","className","Provider","process","env","NODE_ENV","propTypes","oneOfType","node","func","string","any","bool","shape","object"],"mappings":"AAAA;;;AAEA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,6BAAP,MAA0C,yDAA1C;AACA,IAAMC,SAAS,GAAG,CAAC,cAAD,EAAiB,UAAjB,EAA6B,UAA7B,EAAyC,OAAzC,EAAkD,UAAlD,EAA8D,UAA9D,EAA0E,WAA1E,EAAuF,OAAvF,EAAgG,OAAhG,CAAlB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,aAAP,MAA0B,0BAA1B;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AACA,SAASC,0BAAT,QAA2C,sBAA3C;AACA,SAASC,YAAT,QAA6B,UAA7B;AACA,SAASC,uBAAuB,IAAIC,cAApC,QAA0D,mBAA1D;AACA,SAASC,qBAAT,QAAsC,gCAAtC;AACA,SAASC,GAAG,IAAIC,IAAhB,QAA4B,mBAA5B;;AACA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,SAAOA,KAAK,IAAI,IAAT,IAAiB,EAAEC,KAAK,CAACC,OAAN,CAAcF,KAAd,KAAwBA,KAAK,CAACG,MAAN,KAAiB,CAA3C,CAAjB,IAAkEH,KAAK,KAAK,EAAnF;AACD;;AACD,SAASI,iBAAT,CAA2BC,UAA3B,EAAuC;AAAA,MAEnCC,QAFmC,GAOjCD,UAPiC,CAEnCC,QAFmC;AAAA,MAGnCC,KAHmC,GAOjCF,UAPiC,CAGnCE,KAHmC;AAAA,MAInCC,MAJmC,GAOjCH,UAPiC,CAInCG,MAJmC;AAAA,MAKnCC,OALmC,GAOjCJ,UAPiC,CAKnCI,OALmC;AAAA,MAMnCC,QANmC,GAOjCL,UAPiC,CAMnCK,QANmC;AAQrC,MAAMC,KAAK,GAAG;AACZC,IAAAA,IAAI,EAAE,CAAC,MAAD,EAASN,QAAQ,IAAI,UAArB,EAAiCG,OAAO,IAAI,SAA5C,EAAuDF,KAAK,IAAI,OAAhE,EAAyEC,MAAM,IAAI,QAAnF,EAA6FE,QAAQ,IAAI,UAAzG;AADM,GAAd;AAGA,SAAOf,cAAc,CAACgB,KAAD,EAAQf,qBAAqB,CAACJ,0BAAD,CAA7B,CAArB;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAMqB,WAAW,GAAG,aAAazB,KAAK,CAAC0B,UAAN,CAAiB,SAASD,WAAT,CAAqBE,KAArB,EAA4BC,YAA5B,EAA0C;AAC1F,MAAIC,WAAJ;;AAD0F,MAGtFC,YAHsF,GAYpFH,KAZoF,CAGtFG,YAHsF;AAAA,MAItFC,QAJsF,GAYpFJ,KAZoF,CAItFI,QAJsF;AAAA,wBAYpFJ,KAZoF,CAKtFT,QALsF;AAAA,MAKtFA,QALsF,gCAK3E,KAL2E;AAAA,qBAYpFS,KAZoF,CAMtFR,KANsF;AAAA,MAMtFA,KANsF,6BAM9E,KAN8E;AAAA,MAOtFa,SAPsF,GAYpFL,KAZoF,CAOtFK,QAPsF;AAAA,wBAYpFL,KAZoF,CAQtFL,QARsF;AAAA,MAQtFA,QARsF,gCAQ3E,KAR2E;AAAA,yBAYpFK,KAZoF,CAStFM,SATsF;AAAA,MAStFA,SATsF,iCAS1E,EAT0E;AAAA,qBAYpFN,KAZoF,CAUtFJ,KAVsF;AAAA,MAUtFA,KAVsF,6BAU9E,EAV8E;AAAA,MAW/EW,aAX+E,GAYpFP,KAZoF,CAWtFf,KAXsF;AAAA,MAaxFuB,KAbwF,GAahFrC,6BAA6B,CAAC6B,KAAD,EAAQ5B,SAAR,CAbmD;;AAAA,uBAchEG,aAAa,CAAC;AACtCkC,IAAAA,UAAU,EAAEF,aAD0B;AAEtCG,IAAAA,OAAO,EAAEP,YAF6B;AAGtCQ,IAAAA,IAAI,EAAE,aAHgC;AAItCC,IAAAA,KAAK,EAAE;AAJ+B,GAAD,CAdmD;AAAA;AAAA,MAcnF3B,KAdmF;AAAA,MAc5E4B,QAd4E;;AAoB1F,MAAMpB,MAAM,GAAGT,QAAQ,CAACC,KAAD,CAAvB;;AApB0F,wBAqBvDZ,KAAK,CAACyC,QAAN,CAAe,KAAf,CArBuD;AAAA;AAAA,MAqBnFC,YArBmF;AAAA,MAqBrEC,UArBqE;;AAsB1F,MAAMtB,OAAO,GAAGqB,YAAY,IAAI,CAACxB,QAAjC;AACAlB,EAAAA,KAAK,CAAC4C,SAAN,CAAgB;AAAA,WAAMD,UAAU,CAAC,UAAAE,SAAS;AAAA,aAAI3B,QAAQ,GAAG,KAAH,GAAW2B,SAAvB;AAAA,KAAV,CAAhB;AAAA,GAAhB,EAA6E,CAAC3B,QAAD,CAA7E;;AACA,MAAMD,UAAU,GAAGpB,QAAQ,CAAC,EAAD,EAAK8B,KAAL,EAAY;AACrCT,IAAAA,QAAQ,EAARA,QADqC;AAErCC,IAAAA,KAAK,EAALA,KAFqC;AAGrCC,IAAAA,MAAM,EAANA,MAHqC;AAIrCC,IAAAA,OAAO,EAAPA,OAJqC;AAKrCC,IAAAA,QAAQ,EAARA;AALqC,GAAZ,CAA3B;;AAOA,MAAMwB,YAAY,GAAG9C,KAAK,CAAC+C,OAAN,CAAc,YAAM;AACvC,WAAO;AACL7B,MAAAA,QAAQ,EAARA,QADK;AAELC,MAAAA,KAAK,EAALA,KAFK;AAGLC,MAAAA,MAAM,EAANA,MAHK;AAILC,MAAAA,OAAO,EAAPA,OAJK;AAKL2B,MAAAA,MAAM,EAAE,kBAAM;AACZL,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD,OAPI;AAQLX,MAAAA,QAAQ,EAAE,kBAAAiB,KAAK,EAAI;AACjBT,QAAAA,QAAQ,CAACS,KAAK,CAACC,MAAN,CAAatC,KAAd,CAAR;AACAoB,QAAAA,SAAQ,IAAI,IAAZ,IAAoBA,SAAQ,CAACiB,KAAD,CAA5B;AACD,OAXI;AAYLE,MAAAA,OAAO,EAAE,mBAAM;AACbR,QAAAA,UAAU,CAAC,IAAD,CAAV;AACD,OAdI;AAeLrB,MAAAA,QAAQ,EAARA,QAfK;AAgBLV,MAAAA,KAAK,EAAEA,KAAK,IAAI,IAAT,GAAgBA,KAAhB,GAAwB;AAhB1B,KAAP;AAkBD,GAnBoB,EAmBlB,CAACM,QAAD,EAAWC,KAAX,EAAkBC,MAAlB,EAA0BC,OAA1B,EAAmCW,SAAnC,EAA6CV,QAA7C,EAAuDkB,QAAvD,EAAiE5B,KAAjE,CAnBkB,CAArB;AAoBA,MAAMwC,OAAO,GAAGpC,iBAAiB,CAACC,UAAD,CAAjC;;AACA,MAAMoC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3B,QAAI,OAAOtB,QAAP,KAAoB,UAAxB,EAAoC;AAClC,aAAOA,QAAQ,CAACe,YAAD,CAAf;AACD;;AACD,WAAOf,QAAP;AACD,GALD;;AAMA,MAAMuB,IAAI,GAAG,CAACzB,WAAW,GAAGN,KAAK,CAACC,IAArB,KAA8B,IAA9B,GAAqCK,WAArC,GAAmD,KAAhE;AACA,MAAM0B,SAAS,GAAGlD,YAAY,CAAC;AAC7BmD,IAAAA,WAAW,EAAEF,IADgB;AAE7BG,IAAAA,iBAAiB,EAAExB,SAAS,CAACT,IAFA;AAG7BkC,IAAAA,sBAAsB,EAAEvB,KAHK;AAI7BwB,IAAAA,eAAe,EAAE;AACfC,MAAAA,GAAG,EAAEhC,YADU;AAEfG,MAAAA,QAAQ,EAAEsB,cAAc;AAFT,KAJY;AAQ7BpC,IAAAA,UAAU,EAAVA,UAR6B;AAS7B4C,IAAAA,SAAS,EAAET,OAAO,CAAC5B;AATU,GAAD,CAA9B;AAWA,SAAO,aAAad,IAAI,CAACP,kBAAkB,CAAC2D,QAApB,EAA8B;AACpDlD,IAAAA,KAAK,EAAEkC,YAD6C;AAEpDf,IAAAA,QAAQ,EAAE,aAAarB,IAAI,CAAC4C,IAAD,EAAOzD,QAAQ,CAAC,EAAD,EAAK0D,SAAL,CAAf;AAFyB,GAA9B,CAAxB;AAID,CA1EgC,CAAjC;AA2EAQ,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCxC,WAAW,CAACyC;AAAU;AAAtB,EAA+C;AACrF;AACA;AACA;AACA;;AACA;AACF;AACA;AACEnC,EAAAA,QAAQ,EAAE9B;AAAU;AAAD,GAAuCkE,SAAhD,CAA0D,CAAClE,SAAS,CAACmE,IAAX,EAAiBnE,SAAS,CAACoE,IAA3B,CAA1D,CAR2E;;AASrF;AACF;AACA;AACER,EAAAA,SAAS,EAAE5D,SAAS,CAACqE,MAZgE;;AAarF;AACF;AACA;AACExC,EAAAA,YAAY,EAAE7B,SAAS,CAACsE,GAhB6D;;AAiBrF;AACF;AACA;AACA;AACErD,EAAAA,QAAQ,EAAEjB,SAAS,CAACuE,IArBiE;;AAsBrF;AACF;AACA;AACA;AACErD,EAAAA,KAAK,EAAElB,SAAS,CAACuE,IA1BoE;;AA2BrF;AACF;AACA;AACExC,EAAAA,QAAQ,EAAE/B,SAAS,CAACoE,IA9BiE;;AA+BrF;AACF;AACA;AACA;AACE/C,EAAAA,QAAQ,EAAErB,SAAS,CAACuE,IAnCiE;;AAoCrF;AACF;AACA;AACA;AACEvC,EAAAA,SAAS,EAAEhC,SAAS,CAACwE,KAAV,CAAgB;AACzBjD,IAAAA,IAAI,EAAEvB,SAAS,CAACkE,SAAV,CAAoB,CAAClE,SAAS,CAACoE,IAAX,EAAiBpE,SAAS,CAACyE,MAA3B,CAApB;AADmB,GAAhB,CAxC0E;;AA2CrF;AACF;AACA;AACA;AACA;AACEnD,EAAAA,KAAK,EAAEtB,SAAS,CAACwE,KAAV,CAAgB;AACrBjD,IAAAA,IAAI,EAAEvB,SAAS,CAACuD;AADK,GAAhB,CAhD8E;;AAmDrF;AACF;AACA;AACE5C,EAAAA,KAAK,EAAEX,SAAS,CAACsE;AAtDoE,CAAvF,GAuDI,KAAK,CAvDT;AAwDA,SAAS9C,WAAT","sourcesContent":["'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"defaultValue\", \"children\", \"disabled\", \"error\", \"onChange\", \"required\", \"slotProps\", \"slots\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport useControlled from '@mui/utils/useControlled';\nimport { FormControlContext } from './FormControlContext';\nimport { getFormControlUtilityClass } from './formControlClasses';\nimport { useSlotProps } from '../utils';\nimport { unstable_composeClasses as composeClasses } from '../composeClasses';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction hasValue(value) {\n  return value != null && !(Array.isArray(value) && value.length === 0) && value !== '';\n}\nfunction useUtilityClasses(ownerState) {\n  const {\n    disabled,\n    error,\n    filled,\n    focused,\n    required\n  } = ownerState;\n  const slots = {\n    root: ['root', disabled && 'disabled', focused && 'focused', error && 'error', filled && 'filled', required && 'required']\n  };\n  return composeClasses(slots, useClassNamesOverride(getFormControlUtilityClass));\n}\n\n/**\n * Provides context such as filled/focused/error/required for form inputs.\n * Relying on the context provides high flexibility and ensures that the state always stays\n * consistent across the children of the `FormControl`.\n * This context is used by the following components:\n *\n * *   FormLabel\n * *   FormHelperText\n * *   Input\n * *   InputLabel\n *\n * You can find one composition example below and more going to [the demos](https://mui.com/material-ui/react-text-field/#components).\n *\n * ```jsx\n * <FormControl>\n *   <InputLabel htmlFor=\"my-input\">Email address</InputLabel>\n *   <Input id=\"my-input\" aria-describedby=\"my-helper-text\" />\n *   <FormHelperText id=\"my-helper-text\">We'll never share your email.</FormHelperText>\n * </FormControl>\n * ```\n *\n * ⚠️ Only one `Input` can be used within a FormControl because it create visual inconsistencies.\n * For instance, only one input can be focused at the same time, the state shouldn't be shared.\n *\n * Demos:\n *\n * - [Form Control](https://mui.com/base-ui/react-form-control/)\n * - [Input](https://mui.com/joy-ui/react-input/)\n * - [Checkbox](https://mui.com/material-ui/react-checkbox/)\n * - [Radio Group](https://mui.com/material-ui/react-radio-button/)\n * - [Switch](https://mui.com/material-ui/react-switch/)\n * - [Text Field](https://mui.com/material-ui/react-text-field/)\n *\n * API:\n *\n * - [FormControl API](https://mui.com/base-ui/react-form-control/components-api/#form-control)\n */\nconst FormControl = /*#__PURE__*/React.forwardRef(function FormControl(props, forwardedRef) {\n  var _slots$root;\n  const {\n      defaultValue,\n      children,\n      disabled = false,\n      error = false,\n      onChange,\n      required = false,\n      slotProps = {},\n      slots = {},\n      value: incomingValue\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const [value, setValue] = useControlled({\n    controlled: incomingValue,\n    default: defaultValue,\n    name: 'FormControl',\n    state: 'value'\n  });\n  const filled = hasValue(value);\n  const [focusedState, setFocused] = React.useState(false);\n  const focused = focusedState && !disabled;\n  React.useEffect(() => setFocused(isFocused => disabled ? false : isFocused), [disabled]);\n  const ownerState = _extends({}, props, {\n    disabled,\n    error,\n    filled,\n    focused,\n    required\n  });\n  const childContext = React.useMemo(() => {\n    return {\n      disabled,\n      error,\n      filled,\n      focused,\n      onBlur: () => {\n        setFocused(false);\n      },\n      onChange: event => {\n        setValue(event.target.value);\n        onChange == null || onChange(event);\n      },\n      onFocus: () => {\n        setFocused(true);\n      },\n      required,\n      value: value != null ? value : ''\n    };\n  }, [disabled, error, filled, focused, onChange, required, setValue, value]);\n  const classes = useUtilityClasses(ownerState);\n  const renderChildren = () => {\n    if (typeof children === 'function') {\n      return children(childContext);\n    }\n    return children;\n  };\n  const Root = (_slots$root = slots.root) != null ? _slots$root : 'div';\n  const rootProps = useSlotProps({\n    elementType: Root,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      ref: forwardedRef,\n      children: renderChildren()\n    },\n    ownerState,\n    className: classes.root\n  });\n  return /*#__PURE__*/_jsx(FormControlContext.Provider, {\n    value: childContext,\n    children: /*#__PURE__*/_jsx(Root, _extends({}, rootProps))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? FormControl.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.node, PropTypes.func]),\n  /**\n   * Class name applied to the root element.\n   */\n  className: PropTypes.string,\n  /**\n   * @ignore\n   */\n  defaultValue: PropTypes.any,\n  /**\n   * If `true`, the label, input and helper text should be displayed in a disabled state.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the label is displayed in an error state.\n   * @default false\n   */\n  error: PropTypes.bool,\n  /**\n   * Callback fired when the form element's value is modified.\n   */\n  onChange: PropTypes.func,\n  /**\n   * If `true`, the label will indicate that the `input` is required.\n   * @default false\n   */\n  required: PropTypes.bool,\n  /**\n   * The props used for each slot inside the FormControl.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside the FormControl.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  }),\n  /**\n   * The value of the form element.\n   */\n  value: PropTypes.any\n} : void 0;\nexport { FormControl };"]},"metadata":{},"sourceType":"module"}