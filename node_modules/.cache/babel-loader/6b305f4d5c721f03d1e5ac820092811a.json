{"ast":null,"code":"\"use client\";\n\nimport * as React from \"react\";\n\nfunction ratio({\n  width,\n  height\n}) {\n  return width / height;\n}\n\nfunction round(value, decimals = 0) {\n  const factor = 10 ** decimals;\n  return Math.round((value + Number.EPSILON) * factor) / factor;\n}\n\nfunction rankingFunctionComparator(rank) {\n  return (a, b) => rank(b) - rank(a);\n}\n\nclass MinHeap {\n  constructor(comparator) {\n    this.comparator = comparator;\n    this.heap = [];\n    this.n = 0;\n  }\n\n  greater(i, j) {\n    return this.comparator(this.heap[i], this.heap[j]) < 0;\n  }\n\n  swap(i, j) {\n    const temp = this.heap[i];\n    this.heap[i] = this.heap[j];\n    this.heap[j] = temp;\n  }\n\n  swim(i) {\n    let k = i;\n    let k2 = Math.floor(k / 2);\n\n    while (k > 1 && this.greater(k2, k)) {\n      this.swap(k2, k);\n      k = k2;\n      k2 = Math.floor(k / 2);\n    }\n  }\n\n  sink(i) {\n    let k = i;\n    let k2 = k * 2;\n\n    while (k2 <= this.n) {\n      if (k2 < this.n && this.greater(k2, k2 + 1)) k2 += 1;\n      if (!this.greater(k, k2)) break;\n      this.swap(k, k2);\n      k = k2;\n      k2 = k * 2;\n    }\n  }\n\n  push(element) {\n    this.n += 1;\n    this.heap[this.n] = element;\n    this.swim(this.n);\n  }\n\n  pop() {\n    if (this.n === 0) return void 0;\n    this.swap(1, this.n);\n    this.n -= 1;\n    const max = this.heap.pop();\n    this.sink(1);\n    return max;\n  }\n\n  size() {\n    return this.n;\n  }\n\n}\n\nfunction buildPrecedentsMap(graph, startNode, endNode) {\n  const precedentsMap = /* @__PURE__ */new Map();\n  const visited = /* @__PURE__ */new Set();\n  const storedShortestPaths = /* @__PURE__ */new Map();\n  storedShortestPaths.set(startNode, 0);\n  const queue = new MinHeap(rankingFunctionComparator(el => el.weight));\n  queue.push({\n    id: startNode,\n    weight: 0\n  });\n\n  while (queue.size() > 0) {\n    const {\n      id,\n      weight\n    } = queue.pop();\n\n    if (!visited.has(id)) {\n      const neighboringNodes = graph(id);\n      visited.add(id);\n      neighboringNodes.forEach((neighborWeight, neighbor) => {\n        const newWeight = weight + neighborWeight;\n        const currentId = precedentsMap.get(neighbor);\n        const currentWeight = storedShortestPaths.get(neighbor);\n\n        if (currentWeight === void 0 || currentWeight > newWeight && (currentWeight / newWeight > 1.005 || currentId !== void 0 && currentId < id)) {\n          storedShortestPaths.set(neighbor, newWeight);\n          queue.push({\n            id: neighbor,\n            weight: newWeight\n          });\n          precedentsMap.set(neighbor, id);\n        }\n      });\n    }\n  }\n\n  return storedShortestPaths.has(endNode) ? precedentsMap : void 0;\n}\n\nfunction getPathFromPrecedentsMap(precedentsMap, endNode) {\n  const nodes = [];\n\n  for (let node = endNode; node !== void 0; node = precedentsMap.get(node)) {\n    nodes.push(node);\n  }\n\n  return nodes.reverse();\n}\n\nfunction findShortestPath(graph, startNode, endNode) {\n  const precedentsMap = buildPrecedentsMap(graph, startNode, endNode);\n  return precedentsMap ? getPathFromPrecedentsMap(precedentsMap, endNode) : void 0;\n}\n\nfunction findIdealNodeSearch({\n  photos,\n  targetRowHeight,\n  containerWidth\n}) {\n  const minRatio = photos.reduce((acc, photo) => Math.min(ratio(photo), acc), Number.MAX_VALUE);\n  return round(containerWidth / targetRowHeight / minRatio) + 2;\n}\n\nfunction getCommonHeight(row, containerWidth, spacing, padding) {\n  const rowWidth = containerWidth - (row.length - 1) * spacing - 2 * padding * row.length;\n  const totalAspectRatio = row.reduce((acc, photo) => acc + ratio(photo), 0);\n  return rowWidth / totalAspectRatio;\n}\n\nfunction cost(photos, i, j, width, targetRowHeight, spacing, padding) {\n  const row = photos.slice(i, j);\n  const commonHeight = getCommonHeight(row, width, spacing, padding);\n  return commonHeight > 0 ? (commonHeight - targetRowHeight) ** 2 * row.length : void 0;\n}\n\nfunction makeGetRowNeighbors({\n  photos,\n  layoutOptions,\n  targetRowHeight,\n  limitNodeSearch,\n  rowConstraints\n}) {\n  return node => {\n    var _a, _b;\n\n    const {\n      containerWidth,\n      spacing,\n      padding\n    } = layoutOptions;\n    const results = /* @__PURE__ */new Map();\n    results.set(node, 0);\n    const startOffset = (_a = rowConstraints == null ? void 0 : rowConstraints.minPhotos) != null ? _a : 1;\n    const endOffset = Math.min(limitNodeSearch, (_b = rowConstraints == null ? void 0 : rowConstraints.maxPhotos) != null ? _b : Infinity);\n\n    for (let i = node + startOffset; i < photos.length + 1; i += 1) {\n      if (i - node > endOffset) break;\n      const currentCost = cost(photos, node, i, containerWidth, targetRowHeight, spacing, padding);\n      if (currentCost === void 0) break;\n      results.set(i, currentCost);\n    }\n\n    return results;\n  };\n}\n\nfunction computeRowsLayout({\n  photos,\n  layoutOptions\n}) {\n  const {\n    spacing,\n    padding,\n    containerWidth,\n    targetRowHeight,\n    rowConstraints\n  } = layoutOptions;\n  const limitNodeSearch = findIdealNodeSearch({\n    photos,\n    containerWidth,\n    targetRowHeight\n  });\n  const getNeighbors = makeGetRowNeighbors({\n    photos,\n    layoutOptions,\n    targetRowHeight,\n    limitNodeSearch,\n    rowConstraints\n  });\n  const path = findShortestPath(getNeighbors, 0, photos.length);\n  if (path === void 0) return void 0;\n  const layout = [];\n\n  for (let i = 1; i < path.length; i += 1) {\n    const row = photos.map((photo, index) => ({\n      photo,\n      index\n    })).slice(path[i - 1], path[i]);\n    const height = getCommonHeight(row.map(({\n      photo\n    }) => photo), containerWidth, spacing, padding);\n    layout.push(row.map(({\n      photo,\n      index\n    }, photoIndex) => ({\n      photo,\n      layout: {\n        height,\n        width: height * ratio(photo),\n        index,\n        photoIndex,\n        photosCount: row.length\n      }\n    })));\n  }\n\n  return layout;\n}\n\nfunction clsx(...classes) {\n  return [...classes].filter(cls => Boolean(cls)).join(\" \");\n}\n\nfunction calcWidth(base, {\n  width,\n  photosCount\n}, {\n  spacing,\n  padding,\n  containerWidth\n}) {\n  const gaps = spacing * (photosCount - 1) + 2 * padding * photosCount;\n  return `calc((${base} - ${gaps}px) / ${round((containerWidth - gaps) / width, 5)})`;\n}\n\nfunction cssPhotoWidth(layout, layoutOptions) {\n  return layoutOptions.layout !== \"rows\" ? `calc(100% - ${2 * layoutOptions.padding}px)` : calcWidth(\"100%\", layout, layoutOptions);\n}\n\nfunction calculateSizesValue(size, layout, layoutOptions) {\n  var _a, _b;\n\n  return calcWidth((_b = (_a = size.match(/calc\\((.*)\\)/)) == null ? void 0 : _a[1]) != null ? _b : size, layout, layoutOptions);\n}\n\nfunction srcSetAndSizes(photo, layout, layoutOptions) {\n  let srcSet;\n  let sizes;\n  const images = photo.srcSet || photo.images;\n\n  if (images && images.length > 0) {\n    srcSet = images.concat(!images.find(({\n      width\n    }) => width === photo.width) ? [{\n      src: photo.src,\n      width: photo.width,\n      height: photo.height\n    }] : []).sort((first, second) => first.width - second.width).map(image => `${image.src} ${image.width}w`).join(\", \");\n  }\n\n  if (layoutOptions.sizes) {\n    sizes = (layoutOptions.sizes.sizes || []).map(({\n      viewport,\n      size\n    }) => `${viewport} ${calculateSizesValue(size, layout, layoutOptions)}`).concat(calculateSizesValue(layoutOptions.sizes.size, layout, layoutOptions)).join(\", \");\n  } else if (srcSet) {\n    sizes = `${Math.ceil(layout.width / layoutOptions.containerWidth * 100)}vw`;\n  }\n\n  return {\n    srcSet,\n    sizes\n  };\n}\n\nfunction PhotoRenderer(props) {\n  var _a, _b;\n\n  const {\n    photo,\n    layout,\n    layoutOptions,\n    imageProps: {\n      style,\n      className,\n      ...restImageProps\n    } = {},\n    renderPhoto\n  } = props;\n  const {\n    onClick\n  } = layoutOptions;\n  const imageStyle = {\n    display: \"block\",\n    boxSizing: \"content-box\",\n    width: cssPhotoWidth(layout, layoutOptions),\n    height: \"auto\",\n    aspectRatio: `${photo.width} / ${photo.height}`,\n    ...(layoutOptions.padding ? {\n      padding: `${layoutOptions.padding}px`\n    } : null),\n    ...((layoutOptions.layout === \"columns\" || layoutOptions.layout === \"masonry\") && layout.photoIndex < layout.photosCount - 1 ? {\n      marginBottom: `${layoutOptions.spacing}px`\n    } : null),\n    ...(onClick ? {\n      cursor: \"pointer\"\n    } : null),\n    ...style\n  };\n  const handleClick = onClick ? event => {\n    onClick({\n      event,\n      photo,\n      index: layout.index\n    });\n  } : void 0;\n  const imageProps = {\n    src: photo.src,\n    alt: (_a = photo.alt) != null ? _a : \"\",\n    title: photo.title,\n    onClick: handleClick,\n    style: imageStyle,\n    className: clsx(\"react-photo-album--photo\", className),\n    loading: \"lazy\",\n    decoding: \"async\",\n    ...srcSetAndSizes(photo, layout, layoutOptions),\n    ...restImageProps\n  };\n\n  const renderDefaultPhoto = options => {\n    const {\n      src,\n      alt,\n      srcSet,\n      sizes,\n      style: unwrappedStyle,\n      ...rest\n    } = imageProps;\n    return React.createElement(\"img\", {\n      alt,\n      ...(srcSet ? {\n        srcSet,\n        sizes\n      } : null),\n      src,\n      style: (options == null ? void 0 : options.wrapped) ? {\n        display: \"block\",\n        width: \"100%\",\n        height: \"100%\"\n      } : unwrappedStyle,\n      ...rest\n    });\n  };\n\n  const wrapperStyle = (({\n    display,\n    boxSizing,\n    width,\n    aspectRatio,\n    padding,\n    marginBottom,\n    cursor\n  }) => ({\n    display,\n    boxSizing,\n    width,\n    aspectRatio,\n    padding,\n    marginBottom,\n    cursor\n  }))(imageStyle);\n\n  return React.createElement(React.Fragment, null, (_b = renderPhoto == null ? void 0 : renderPhoto({\n    photo,\n    layout,\n    layoutOptions,\n    imageProps,\n    renderDefaultPhoto,\n    wrapperStyle\n  })) != null ? _b : renderDefaultPhoto());\n}\n\nfunction defaultRenderRowContainer({\n  rowContainerProps,\n  children\n}) {\n  return React.createElement(\"div\", { ...rowContainerProps\n  }, children);\n}\n\nfunction RowContainerRenderer(props) {\n  const {\n    layoutOptions,\n    rowIndex,\n    rowsCount,\n    renderRowContainer,\n    rowContainerProps: {\n      style,\n      className,\n      ...restRowContainerProps\n    } = {},\n    children\n  } = props;\n  const rowContainerProps = {\n    className: clsx(\"react-photo-album--row\", className),\n    style: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      flexWrap: \"nowrap\",\n      alignItems: \"flex-start\",\n      justifyContent: \"space-between\",\n      ...(rowIndex < rowsCount - 1 ? {\n        marginBottom: `${layoutOptions.spacing}px`\n      } : null),\n      ...style\n    },\n    ...restRowContainerProps\n  };\n  return React.createElement(React.Fragment, null, (renderRowContainer != null ? renderRowContainer : defaultRenderRowContainer)({\n    layoutOptions,\n    rowIndex,\n    rowsCount,\n    rowContainerProps,\n    children\n  }));\n}\n\nfunction RowsLayout(props) {\n  const {\n    photos,\n    layoutOptions,\n    renderPhoto,\n    renderRowContainer,\n    componentsProps: {\n      imageProps,\n      rowContainerProps\n    }\n  } = props;\n  const rowsLayout = computeRowsLayout({\n    photos,\n    layoutOptions\n  });\n  if (!rowsLayout) return null;\n  return React.createElement(React.Fragment, null, rowsLayout.map((row, rowIndex) => React.createElement(RowContainerRenderer, {\n    key: `row-${rowIndex}`,\n    layoutOptions,\n    rowIndex,\n    rowsCount: rowsLayout.length,\n    renderRowContainer,\n    rowContainerProps\n  }, row.map(({\n    photo,\n    layout\n  }) => React.createElement(PhotoRenderer, {\n    key: photo.key || photo.src,\n    photo,\n    layout,\n    layoutOptions,\n    renderPhoto,\n    imageProps\n  })))));\n}\n\nfunction computeShortestPath(graph, pathLength, startNode, endNode) {\n  const matrix = /* @__PURE__ */new Map();\n  const queue = /* @__PURE__ */new Set();\n  queue.add(startNode);\n\n  for (let length = 0; length < pathLength; length += 1) {\n    const currentQueue = [...queue.keys()];\n    queue.clear();\n    currentQueue.forEach(node => {\n      const accumulatedWeight = length > 0 ? matrix.get(node)[length].weight : 0;\n      graph(node).forEach(({\n        neighbor,\n        weight\n      }) => {\n        let paths = matrix.get(neighbor);\n\n        if (!paths) {\n          paths = [];\n          matrix.set(neighbor, paths);\n        }\n\n        const newWeight = accumulatedWeight + weight;\n        const nextPath = paths[length + 1];\n\n        if (!nextPath || nextPath.weight > newWeight && (nextPath.weight / newWeight > 1.0001 || node < nextPath.node)) {\n          paths[length + 1] = {\n            node,\n            weight: newWeight\n          };\n        }\n\n        if (length < pathLength - 1 && neighbor !== endNode) {\n          queue.add(neighbor);\n        }\n      });\n    });\n  }\n\n  return matrix;\n}\n\nfunction reconstructShortestPath(matrix, pathLength, endNode) {\n  const path = [endNode];\n\n  for (let node = endNode, length = pathLength; length > 0; length -= 1) {\n    node = matrix.get(node)[length].node;\n    path.push(node);\n  }\n\n  return path.reverse();\n}\n\nfunction findShortestPathLengthN(graph, pathLength, startNode, endNode) {\n  return reconstructShortestPath(computeShortestPath(graph, pathLength, startNode, endNode), pathLength, endNode);\n}\n\nfunction makeGetColumnNeighbors({\n  photos,\n  spacing,\n  padding,\n  targetColumnWidth,\n  targetColumnHeight\n}) {\n  return node => {\n    const results = [];\n    const cutOffHeight = targetColumnHeight * 1.5;\n    let height = targetColumnWidth / ratio(photos[node]) + 2 * padding;\n\n    for (let i = node + 1; i < photos.length + 1; i += 1) {\n      results.push({\n        neighbor: i,\n        weight: (targetColumnHeight - height) ** 2\n      });\n\n      if (height > cutOffHeight || i === photos.length) {\n        break;\n      }\n\n      height += targetColumnWidth / ratio(photos[i]) + spacing + 2 * padding;\n    }\n\n    return results;\n  };\n}\n\nfunction buildColumnsModel({\n  path,\n  photos,\n  containerWidth,\n  columnsGaps,\n  columnsRatios,\n  spacing,\n  padding\n}) {\n  const columnsModel = [];\n  const totalRatio = columnsRatios.reduce((total, columnRatio) => total + columnRatio, 0);\n\n  for (let i = 0; i < path.length - 1; i += 1) {\n    const column = photos.map((photo, index) => ({\n      photo,\n      index\n    })).slice(path[i], path[i + 1]);\n    const totalAdjustedGaps = columnsRatios.reduce((total, columnRatio, index) => total + (columnsGaps[i] - columnsGaps[index]) * columnRatio, 0);\n    const columnWidth = (containerWidth - (path.length - 2) * spacing - 2 * (path.length - 1) * padding - totalAdjustedGaps) * columnsRatios[i] / totalRatio;\n    columnsModel.push(column.map(({\n      photo,\n      index\n    }, photoIndex) => ({\n      photo,\n      layout: {\n        width: columnWidth,\n        height: columnWidth / ratio(photo),\n        index,\n        photoIndex,\n        photosCount: column.length\n      }\n    })));\n  }\n\n  return columnsModel;\n}\n\nfunction computeColumnsModel({\n  photos,\n  layoutOptions,\n  targetColumnWidth\n}) {\n  const {\n    columns,\n    spacing,\n    padding,\n    containerWidth\n  } = layoutOptions;\n  const columnsGaps = [];\n  const columnsRatios = [];\n\n  if (photos.length <= columns) {\n    const averageRatio = photos.length > 0 ? photos.reduce((acc, photo) => acc + ratio(photo), 0) / photos.length : 1;\n\n    for (let i = 0; i < columns; i += 1) {\n      columnsGaps[i] = 2 * padding;\n      columnsRatios[i] = i < photos.length ? ratio(photos[i]) : averageRatio;\n    }\n\n    const columnsModel2 = buildColumnsModel({\n      path: Array.from({\n        length: columns + 1\n      }).map((_, index) => Math.min(index, photos.length)),\n      photos,\n      columnsRatios,\n      columnsGaps,\n      containerWidth,\n      spacing,\n      padding\n    });\n    return {\n      columnsGaps,\n      columnsRatios,\n      columnsModel: columnsModel2\n    };\n  }\n\n  const targetColumnHeight = (photos.reduce((acc, photo) => acc + targetColumnWidth / ratio(photo), 0) + spacing * (photos.length - columns) + 2 * padding * photos.length) / columns;\n  const getNeighbors = makeGetColumnNeighbors({\n    photos,\n    targetColumnWidth,\n    targetColumnHeight,\n    spacing,\n    padding\n  });\n  const path = findShortestPathLengthN(getNeighbors, columns, 0, photos.length);\n\n  for (let i = 0; i < path.length - 1; i += 1) {\n    const column = photos.slice(path[i], path[i + 1]);\n    columnsGaps[i] = spacing * (column.length - 1) + 2 * padding * column.length;\n    columnsRatios[i] = 1 / column.reduce((acc, photo) => acc + 1 / ratio(photo), 0);\n  }\n\n  const columnsModel = buildColumnsModel({\n    path,\n    photos,\n    columnsRatios,\n    columnsGaps,\n    containerWidth,\n    spacing,\n    padding\n  });\n  return {\n    columnsGaps,\n    columnsRatios,\n    columnsModel\n  };\n}\n\nfunction computeLayout(props) {\n  const {\n    photos,\n    layoutOptions\n  } = props;\n  const {\n    columns,\n    spacing,\n    padding,\n    containerWidth\n  } = layoutOptions;\n  const targetColumnWidth = (containerWidth - spacing * (columns - 1) - 2 * padding * columns) / columns;\n  const {\n    columnsGaps,\n    columnsRatios,\n    columnsModel\n  } = computeColumnsModel({\n    photos,\n    layoutOptions,\n    targetColumnWidth\n  });\n\n  if (columnsModel.findIndex(columnModel => columnModel.findIndex(({\n    layout: {\n      width,\n      height\n    }\n  }) => width < 0 || height < 0) >= 0) >= 0) {\n    if (columns > 1) {\n      return computeLayout({\n        photos,\n        layoutOptions: { ...layoutOptions,\n          columns: columns - 1\n        }\n      });\n    }\n\n    return void 0;\n  }\n\n  return {\n    columnsModel,\n    columnsGaps,\n    columnsRatios\n  };\n}\n\nfunction computeColumnsLayout({\n  photos,\n  layoutOptions\n}) {\n  return computeLayout({\n    photos,\n    layoutOptions\n  });\n}\n\nfunction defaultRenderColumnContainer({\n  columnContainerProps,\n  children\n}) {\n  return React.createElement(\"div\", { ...columnContainerProps\n  }, children);\n}\n\nfunction cssColumnWidth(props) {\n  const {\n    layoutOptions,\n    columnIndex,\n    columnsCount,\n    columnsGaps,\n    columnsRatios\n  } = props;\n  const {\n    layout,\n    spacing,\n    padding\n  } = layoutOptions;\n\n  if (layout === \"masonry\" || !columnsGaps || !columnsRatios) {\n    return `calc((100% - ${spacing * (columnsCount - 1)}px) / ${columnsCount})`;\n  }\n\n  const totalRatio = columnsRatios.reduce((acc, ratio2) => acc + ratio2, 0);\n  const totalAdjustedGaps = columnsRatios.reduce((acc, ratio2, index) => acc + (columnsGaps[columnIndex] - columnsGaps[index]) * ratio2, 0);\n  return `calc((100% - ${round((columnsCount - 1) * spacing + 2 * columnsCount * padding + totalAdjustedGaps, 3)}px) * ${round(columnsRatios[columnIndex] / totalRatio, 5)} + ${2 * padding}px)`;\n}\n\nfunction ColumnContainerRenderer(props) {\n  const {\n    layoutOptions,\n    renderColumnContainer,\n    children,\n    columnContainerProps: {\n      style,\n      className,\n      ...restColumnContainerProps\n    } = {},\n    ...rest\n  } = props;\n  const columnContainerProps = {\n    className: clsx(\"react-photo-album--column\", className),\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      flexWrap: \"nowrap\",\n      alignItems: \"flex-start\",\n      width: cssColumnWidth(props),\n      justifyContent: layoutOptions.layout === \"columns\" ? \"space-between\" : \"flex-start\",\n      ...style\n    },\n    ...restColumnContainerProps\n  };\n  return React.createElement(React.Fragment, null, (renderColumnContainer != null ? renderColumnContainer : defaultRenderColumnContainer)({\n    layoutOptions,\n    columnContainerProps,\n    children,\n    ...rest\n  }));\n}\n\nfunction ColumnsLayout(props) {\n  const {\n    photos,\n    layoutOptions,\n    renderPhoto,\n    renderColumnContainer,\n    componentsProps: {\n      imageProps,\n      columnContainerProps\n    }\n  } = props;\n  const columnsLayout = computeColumnsLayout({\n    photos,\n    layoutOptions\n  });\n  if (!columnsLayout) return null;\n  const {\n    columnsModel,\n    columnsRatios,\n    columnsGaps\n  } = columnsLayout;\n  return React.createElement(React.Fragment, null, columnsModel.map((column, columnIndex) => React.createElement(ColumnContainerRenderer, {\n    key: `column-${columnIndex}`,\n    layoutOptions,\n    columnIndex,\n    columnsCount: columnsModel.length,\n    columnsGaps,\n    columnsRatios,\n    renderColumnContainer,\n    columnContainerProps\n  }, column.map(({\n    photo,\n    layout\n  }) => React.createElement(PhotoRenderer, {\n    key: photo.key || photo.src,\n    photo,\n    layout,\n    layoutOptions,\n    renderPhoto,\n    imageProps\n  })))));\n}\n\nfunction computeMasonryLayout(props) {\n  const {\n    photos,\n    layoutOptions\n  } = props;\n  const {\n    columns,\n    spacing,\n    padding,\n    containerWidth\n  } = layoutOptions;\n  const columnWidth = (containerWidth - spacing * (columns - 1) - 2 * padding * columns) / columns;\n\n  if (columnWidth <= 0) {\n    return columns > 1 ? computeMasonryLayout({ ...props,\n      layoutOptions: { ...layoutOptions,\n        columns: columns - 1\n      }\n    }) : void 0;\n  }\n\n  const columnsCurrentTopPositions = [];\n\n  for (let i = 0; i < columns; i += 1) {\n    columnsCurrentTopPositions[i] = 0;\n  }\n\n  const columnsModel = photos.reduce((model, photo, index) => {\n    const shortestColumn = columnsCurrentTopPositions.reduce((currentShortestColumn, item, i) => item < columnsCurrentTopPositions[currentShortestColumn] - 1 ? i : currentShortestColumn, 0);\n    columnsCurrentTopPositions[shortestColumn] = columnsCurrentTopPositions[shortestColumn] + columnWidth / ratio(photo) + spacing + 2 * padding;\n    model[shortestColumn].push({\n      photo,\n      index\n    });\n    return model;\n  }, Array.from({\n    length: columns\n  }).map(() => []));\n  return columnsModel.map(column => column.map(({\n    photo,\n    index\n  }, photoIndex) => ({\n    photo,\n    layout: {\n      width: columnWidth,\n      height: columnWidth / ratio(photo),\n      index,\n      photoIndex,\n      photosCount: column.length\n    }\n  })));\n}\n\nfunction MasonryLayout(props) {\n  const {\n    photos,\n    layoutOptions,\n    renderPhoto,\n    renderColumnContainer,\n    componentsProps: {\n      imageProps,\n      columnContainerProps\n    }\n  } = props;\n  const masonryLayout = computeMasonryLayout({\n    photos,\n    layoutOptions\n  });\n  if (!masonryLayout) return null;\n  return React.createElement(React.Fragment, null, masonryLayout.map((column, columnIndex) => React.createElement(ColumnContainerRenderer, {\n    key: `masonry-column-${columnIndex}`,\n    layoutOptions,\n    columnsCount: masonryLayout.length,\n    columnIndex,\n    renderColumnContainer,\n    columnContainerProps\n  }, column.map(({\n    photo,\n    layout\n  }) => React.createElement(PhotoRenderer, {\n    key: photo.key || photo.src,\n    photo,\n    layout,\n    layoutOptions,\n    renderPhoto,\n    imageProps\n  })))));\n}\n\nfunction defaultRenderContainer({\n  containerProps,\n  children,\n  containerRef\n}) {\n  return React.createElement(\"div\", {\n    ref: containerRef,\n    ...containerProps\n  }, children);\n}\n\nfunction ContainerRenderer(props) {\n  const {\n    layout,\n    renderContainer,\n    children,\n    containerRef,\n    containerProps: {\n      style,\n      className,\n      ...restContainerProps\n    } = {}\n  } = props;\n  const containerProps = {\n    className: clsx(\"react-photo-album\", `react-photo-album--${layout}`, className),\n    style: {\n      display: \"flex\",\n      flexWrap: \"nowrap\",\n      justifyContent: \"space-between\",\n      flexDirection: layout === \"rows\" ? \"column\" : \"row\",\n      ...style\n    },\n    ...restContainerProps\n  };\n  return React.createElement(React.Fragment, null, (renderContainer != null ? renderContainer : defaultRenderContainer)({\n    containerProps,\n    containerRef,\n    layout,\n    children\n  }));\n}\n\nfunction useArray(array) {\n  const ref = React.useRef(array);\n\n  if (!array || !ref.current || array.join() !== ref.current.join()) {\n    ref.current = array;\n  }\n\n  return ref.current;\n}\n\nfunction containerWidthReducer(state, {\n  newContainerWidth,\n  newScrollbarWidth\n}) {\n  const {\n    containerWidth,\n    scrollbarWidth\n  } = state;\n\n  if (containerWidth !== void 0 && scrollbarWidth !== void 0 && newContainerWidth !== void 0 && newScrollbarWidth !== void 0 && newContainerWidth > containerWidth && newContainerWidth - containerWidth <= 20 && newScrollbarWidth < scrollbarWidth) {\n    return {\n      containerWidth,\n      scrollbarWidth: newScrollbarWidth\n    };\n  }\n\n  return containerWidth !== newContainerWidth || scrollbarWidth !== newScrollbarWidth ? {\n    containerWidth: newContainerWidth,\n    scrollbarWidth: newScrollbarWidth\n  } : state;\n}\n\nfunction resolveContainerWidth(el, breakpoints2) {\n  let width = el == null ? void 0 : el.clientWidth;\n\n  if (width !== void 0 && breakpoints2 && breakpoints2.length > 0) {\n    const sorted = [...breakpoints2.filter(x => x > 0)].sort((a, b) => b - a);\n    sorted.push(Math.floor(sorted[sorted.length - 1] / 2));\n    const threshold = width;\n    width = sorted.find((breakpoint, index) => breakpoint <= threshold || index === sorted.length - 1);\n  }\n\n  return width;\n}\n\nfunction useContainerWidth(breakpoints2, defaultContainerWidth) {\n  const [{\n    containerWidth\n  }, dispatch] = React.useReducer(containerWidthReducer, {\n    containerWidth: defaultContainerWidth\n  });\n  const ref = React.useRef(null);\n  const observerRef = React.useRef();\n  const containerRef = React.useCallback(node => {\n    var _a;\n\n    (_a = observerRef.current) == null ? void 0 : _a.disconnect();\n    observerRef.current = void 0;\n    ref.current = node;\n\n    const updateWidth = () => dispatch({\n      newContainerWidth: resolveContainerWidth(ref.current, breakpoints2),\n      newScrollbarWidth: window.innerWidth - document.documentElement.clientWidth\n    });\n\n    updateWidth();\n\n    if (node && typeof ResizeObserver !== \"undefined\") {\n      observerRef.current = new ResizeObserver(updateWidth);\n      observerRef.current.observe(node);\n    }\n  }, [breakpoints2]);\n  return {\n    containerRef,\n    containerWidth\n  };\n}\n\nconst breakpoints = Object.freeze([1200, 600, 300, 0]);\n\nfunction unwrap(value, arg) {\n  return typeof value === \"function\" ? value(arg) : value;\n}\n\nfunction unwrapParameter(value, containerWidth) {\n  return typeof value !== \"undefined\" ? unwrap(value, containerWidth) : void 0;\n}\n\nfunction selectResponsiveValue(values, containerWidth) {\n  const index = breakpoints.findIndex(breakpoint => breakpoint <= containerWidth);\n  return unwrap(values[index >= 0 ? index : 0], containerWidth);\n}\n\nfunction resolveResponsiveParameter(parameter, containerWidth, values, minValue = 0) {\n  const value = unwrapParameter(parameter, containerWidth);\n  return Math.round(Math.max(value === void 0 ? selectResponsiveValue(values, containerWidth) : value, minValue));\n}\n\nfunction resolveLayoutOptions({\n  layout,\n  onClick,\n  containerWidth,\n  targetRowHeight,\n  rowConstraints,\n  columns,\n  spacing,\n  padding,\n  sizes\n}) {\n  return {\n    layout,\n    onClick,\n    containerWidth,\n    columns: resolveResponsiveParameter(columns, containerWidth, [5, 4, 3, 2], 1),\n    spacing: resolveResponsiveParameter(spacing, containerWidth, [20, 15, 10, 5]),\n    padding: resolveResponsiveParameter(padding, containerWidth, [0, 0, 0, 0, 0]),\n    targetRowHeight: resolveResponsiveParameter(targetRowHeight, containerWidth, [w => w / 5, w => w / 4, w => w / 3, w => w / 2]),\n    rowConstraints: unwrapParameter(rowConstraints, containerWidth),\n    sizes\n  };\n}\n\nfunction resolveComponentsProps(props, containerWidth, layoutOptions) {\n  const {\n    photos,\n    componentsProps: componentsPropsProp\n  } = props;\n  const componentsProps = unwrap(componentsPropsProp, containerWidth) || {};\n\n  if (layoutOptions) {\n    const {\n      layout,\n      spacing,\n      padding,\n      rowConstraints\n    } = layoutOptions;\n\n    if (layout === \"rows\") {\n      const {\n        singleRowMaxHeight\n      } = rowConstraints || {};\n\n      if (singleRowMaxHeight) {\n        const maxWidth = Math.floor(photos.reduce((acc, {\n          width,\n          height\n        }) => acc + width / height * singleRowMaxHeight - 2 * padding, padding * photos.length * 2 + spacing * (photos.length - 1)));\n\n        if (maxWidth > 0) {\n          componentsProps.containerProps = componentsProps.containerProps || {};\n          componentsProps.containerProps.style = {\n            maxWidth,\n            ...componentsProps.containerProps.style\n          };\n        }\n      }\n    }\n  }\n\n  return componentsProps;\n}\n\nfunction renderLayout(props, componentsProps, layoutOptions) {\n  const {\n    photos,\n    layout,\n    renderPhoto,\n    renderRowContainer,\n    renderColumnContainer\n  } = props;\n  const commonLayoutProps = {\n    photos,\n    renderPhoto,\n    componentsProps\n  };\n\n  if (layout === \"rows\") {\n    return React.createElement(RowsLayout, {\n      layoutOptions,\n      renderRowContainer,\n      ...commonLayoutProps\n    });\n  }\n\n  if (layout === \"columns\") {\n    return React.createElement(ColumnsLayout, {\n      layoutOptions,\n      renderColumnContainer,\n      ...commonLayoutProps\n    });\n  }\n\n  return React.createElement(MasonryLayout, {\n    layoutOptions,\n    renderColumnContainer,\n    ...commonLayoutProps\n  });\n}\n\nfunction PhotoAlbum(props) {\n  const {\n    photos,\n    layout,\n    renderContainer,\n    defaultContainerWidth,\n    breakpoints: breakpoints2\n  } = props;\n  const {\n    containerRef,\n    containerWidth\n  } = useContainerWidth(useArray(breakpoints2), defaultContainerWidth);\n  if (!layout || ![\"rows\", \"columns\", \"masonry\"].includes(layout) || !Array.isArray(photos)) return null;\n  const layoutOptions = containerWidth ? resolveLayoutOptions({\n    containerWidth,\n    ...props\n  }) : void 0;\n  const componentsProps = resolveComponentsProps(props, containerWidth, layoutOptions);\n  return React.createElement(ContainerRenderer, {\n    layout,\n    containerRef,\n    renderContainer,\n    containerProps: componentsProps.containerProps\n  }, layoutOptions && renderLayout(props, componentsProps, layoutOptions));\n}\n\nexport { PhotoAlbum, PhotoAlbum as default };","map":{"version":3,"sources":["/Users/viviengeschwind/Projects/Website/website-professional/node_modules/react-photo-album/dist/index.mjs"],"names":["React","ratio","width","height","round","value","decimals","factor","Math","Number","EPSILON","rankingFunctionComparator","rank","a","b","MinHeap","constructor","comparator","heap","n","greater","i","j","swap","temp","swim","k","k2","floor","sink","push","element","pop","max","size","buildPrecedentsMap","graph","startNode","endNode","precedentsMap","Map","visited","Set","storedShortestPaths","set","queue","el","weight","id","has","neighboringNodes","add","forEach","neighborWeight","neighbor","newWeight","currentId","get","currentWeight","getPathFromPrecedentsMap","nodes","node","reverse","findShortestPath","findIdealNodeSearch","photos","targetRowHeight","containerWidth","minRatio","reduce","acc","photo","min","MAX_VALUE","getCommonHeight","row","spacing","padding","rowWidth","length","totalAspectRatio","cost","slice","commonHeight","makeGetRowNeighbors","layoutOptions","limitNodeSearch","rowConstraints","_a","_b","results","startOffset","minPhotos","endOffset","maxPhotos","Infinity","currentCost","computeRowsLayout","getNeighbors","path","layout","map","index","photoIndex","photosCount","clsx","classes","filter","cls","Boolean","join","calcWidth","base","gaps","cssPhotoWidth","calculateSizesValue","match","srcSetAndSizes","srcSet","sizes","images","concat","find","src","sort","first","second","image","viewport","ceil","PhotoRenderer","props","imageProps","style","className","restImageProps","renderPhoto","onClick","imageStyle","display","boxSizing","aspectRatio","marginBottom","cursor","handleClick","event","alt","title","loading","decoding","renderDefaultPhoto","options","unwrappedStyle","rest","createElement","wrapped","wrapperStyle","Fragment","defaultRenderRowContainer","rowContainerProps","children","RowContainerRenderer","rowIndex","rowsCount","renderRowContainer","restRowContainerProps","flexDirection","flexWrap","alignItems","justifyContent","RowsLayout","componentsProps","rowsLayout","key","computeShortestPath","pathLength","matrix","currentQueue","keys","clear","accumulatedWeight","paths","nextPath","reconstructShortestPath","findShortestPathLengthN","makeGetColumnNeighbors","targetColumnWidth","targetColumnHeight","cutOffHeight","buildColumnsModel","columnsGaps","columnsRatios","columnsModel","totalRatio","total","columnRatio","column","totalAdjustedGaps","columnWidth","computeColumnsModel","columns","averageRatio","columnsModel2","Array","from","_","computeLayout","findIndex","columnModel","computeColumnsLayout","defaultRenderColumnContainer","columnContainerProps","cssColumnWidth","columnIndex","columnsCount","ratio2","ColumnContainerRenderer","renderColumnContainer","restColumnContainerProps","ColumnsLayout","columnsLayout","computeMasonryLayout","columnsCurrentTopPositions","model","shortestColumn","currentShortestColumn","item","MasonryLayout","masonryLayout","defaultRenderContainer","containerProps","containerRef","ref","ContainerRenderer","renderContainer","restContainerProps","useArray","array","useRef","current","containerWidthReducer","state","newContainerWidth","newScrollbarWidth","scrollbarWidth","resolveContainerWidth","breakpoints2","clientWidth","sorted","x","threshold","breakpoint","useContainerWidth","defaultContainerWidth","dispatch","useReducer","observerRef","useCallback","disconnect","updateWidth","window","innerWidth","document","documentElement","ResizeObserver","observe","breakpoints","Object","freeze","unwrap","arg","unwrapParameter","selectResponsiveValue","values","resolveResponsiveParameter","parameter","minValue","resolveLayoutOptions","w","resolveComponentsProps","componentsPropsProp","singleRowMaxHeight","maxWidth","renderLayout","commonLayoutProps","PhotoAlbum","includes","isArray","default"],"mappings":"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","sourcesContent":["\"use client\";\nimport * as React from \"react\";\nfunction ratio({ width, height }) {\n  return width / height;\n}\nfunction round(value, decimals = 0) {\n  const factor = 10 ** decimals;\n  return Math.round((value + Number.EPSILON) * factor) / factor;\n}\nfunction rankingFunctionComparator(rank) {\n  return (a, b) => rank(b) - rank(a);\n}\nclass MinHeap {\n  constructor(comparator) {\n    this.comparator = comparator;\n    this.heap = [];\n    this.n = 0;\n  }\n  greater(i, j) {\n    return this.comparator(this.heap[i], this.heap[j]) < 0;\n  }\n  swap(i, j) {\n    const temp = this.heap[i];\n    this.heap[i] = this.heap[j];\n    this.heap[j] = temp;\n  }\n  swim(i) {\n    let k = i;\n    let k2 = Math.floor(k / 2);\n    while (k > 1 && this.greater(k2, k)) {\n      this.swap(k2, k);\n      k = k2;\n      k2 = Math.floor(k / 2);\n    }\n  }\n  sink(i) {\n    let k = i;\n    let k2 = k * 2;\n    while (k2 <= this.n) {\n      if (k2 < this.n && this.greater(k2, k2 + 1))\n        k2 += 1;\n      if (!this.greater(k, k2))\n        break;\n      this.swap(k, k2);\n      k = k2;\n      k2 = k * 2;\n    }\n  }\n  push(element) {\n    this.n += 1;\n    this.heap[this.n] = element;\n    this.swim(this.n);\n  }\n  pop() {\n    if (this.n === 0)\n      return void 0;\n    this.swap(1, this.n);\n    this.n -= 1;\n    const max = this.heap.pop();\n    this.sink(1);\n    return max;\n  }\n  size() {\n    return this.n;\n  }\n}\nfunction buildPrecedentsMap(graph, startNode, endNode) {\n  const precedentsMap = /* @__PURE__ */ new Map();\n  const visited = /* @__PURE__ */ new Set();\n  const storedShortestPaths = /* @__PURE__ */ new Map();\n  storedShortestPaths.set(startNode, 0);\n  const queue = new MinHeap(rankingFunctionComparator((el) => el.weight));\n  queue.push({ id: startNode, weight: 0 });\n  while (queue.size() > 0) {\n    const { id, weight } = queue.pop();\n    if (!visited.has(id)) {\n      const neighboringNodes = graph(id);\n      visited.add(id);\n      neighboringNodes.forEach((neighborWeight, neighbor) => {\n        const newWeight = weight + neighborWeight;\n        const currentId = precedentsMap.get(neighbor);\n        const currentWeight = storedShortestPaths.get(neighbor);\n        if (currentWeight === void 0 || currentWeight > newWeight && (currentWeight / newWeight > 1.005 || currentId !== void 0 && currentId < id)) {\n          storedShortestPaths.set(neighbor, newWeight);\n          queue.push({ id: neighbor, weight: newWeight });\n          precedentsMap.set(neighbor, id);\n        }\n      });\n    }\n  }\n  return storedShortestPaths.has(endNode) ? precedentsMap : void 0;\n}\nfunction getPathFromPrecedentsMap(precedentsMap, endNode) {\n  const nodes = [];\n  for (let node = endNode; node !== void 0; node = precedentsMap.get(node)) {\n    nodes.push(node);\n  }\n  return nodes.reverse();\n}\nfunction findShortestPath(graph, startNode, endNode) {\n  const precedentsMap = buildPrecedentsMap(graph, startNode, endNode);\n  return precedentsMap ? getPathFromPrecedentsMap(precedentsMap, endNode) : void 0;\n}\nfunction findIdealNodeSearch({\n  photos,\n  targetRowHeight,\n  containerWidth\n}) {\n  const minRatio = photos.reduce((acc, photo) => Math.min(ratio(photo), acc), Number.MAX_VALUE);\n  return round(containerWidth / targetRowHeight / minRatio) + 2;\n}\nfunction getCommonHeight(row, containerWidth, spacing, padding) {\n  const rowWidth = containerWidth - (row.length - 1) * spacing - 2 * padding * row.length;\n  const totalAspectRatio = row.reduce((acc, photo) => acc + ratio(photo), 0);\n  return rowWidth / totalAspectRatio;\n}\nfunction cost(photos, i, j, width, targetRowHeight, spacing, padding) {\n  const row = photos.slice(i, j);\n  const commonHeight = getCommonHeight(row, width, spacing, padding);\n  return commonHeight > 0 ? (commonHeight - targetRowHeight) ** 2 * row.length : void 0;\n}\nfunction makeGetRowNeighbors({\n  photos,\n  layoutOptions,\n  targetRowHeight,\n  limitNodeSearch,\n  rowConstraints\n}) {\n  return (node) => {\n    var _a, _b;\n    const { containerWidth, spacing, padding } = layoutOptions;\n    const results = /* @__PURE__ */ new Map();\n    results.set(node, 0);\n    const startOffset = (_a = rowConstraints == null ? void 0 : rowConstraints.minPhotos) != null ? _a : 1;\n    const endOffset = Math.min(limitNodeSearch, (_b = rowConstraints == null ? void 0 : rowConstraints.maxPhotos) != null ? _b : Infinity);\n    for (let i = node + startOffset; i < photos.length + 1; i += 1) {\n      if (i - node > endOffset)\n        break;\n      const currentCost = cost(photos, node, i, containerWidth, targetRowHeight, spacing, padding);\n      if (currentCost === void 0)\n        break;\n      results.set(i, currentCost);\n    }\n    return results;\n  };\n}\nfunction computeRowsLayout({\n  photos,\n  layoutOptions\n}) {\n  const { spacing, padding, containerWidth, targetRowHeight, rowConstraints } = layoutOptions;\n  const limitNodeSearch = findIdealNodeSearch({ photos, containerWidth, targetRowHeight });\n  const getNeighbors = makeGetRowNeighbors({\n    photos,\n    layoutOptions,\n    targetRowHeight,\n    limitNodeSearch,\n    rowConstraints\n  });\n  const path = findShortestPath(getNeighbors, 0, photos.length);\n  if (path === void 0)\n    return void 0;\n  const layout = [];\n  for (let i = 1; i < path.length; i += 1) {\n    const row = photos.map((photo, index) => ({ photo, index })).slice(path[i - 1], path[i]);\n    const height = getCommonHeight(\n      row.map(({ photo }) => photo),\n      containerWidth,\n      spacing,\n      padding\n    );\n    layout.push(\n      row.map(({ photo, index }, photoIndex) => ({\n        photo,\n        layout: {\n          height,\n          width: height * ratio(photo),\n          index,\n          photoIndex,\n          photosCount: row.length\n        }\n      }))\n    );\n  }\n  return layout;\n}\nfunction clsx(...classes) {\n  return [...classes].filter((cls) => Boolean(cls)).join(\" \");\n}\nfunction calcWidth(base, { width, photosCount }, { spacing, padding, containerWidth }) {\n  const gaps = spacing * (photosCount - 1) + 2 * padding * photosCount;\n  return `calc((${base} - ${gaps}px) / ${round((containerWidth - gaps) / width, 5)})`;\n}\nfunction cssPhotoWidth(layout, layoutOptions) {\n  return layoutOptions.layout !== \"rows\" ? `calc(100% - ${2 * layoutOptions.padding}px)` : calcWidth(\"100%\", layout, layoutOptions);\n}\nfunction calculateSizesValue(size, layout, layoutOptions) {\n  var _a, _b;\n  return calcWidth((_b = (_a = size.match(/calc\\((.*)\\)/)) == null ? void 0 : _a[1]) != null ? _b : size, layout, layoutOptions);\n}\nfunction srcSetAndSizes(photo, layout, layoutOptions) {\n  let srcSet;\n  let sizes;\n  const images = photo.srcSet || photo.images;\n  if (images && images.length > 0) {\n    srcSet = images.concat(\n      !images.find(({ width }) => width === photo.width) ? [{ src: photo.src, width: photo.width, height: photo.height }] : []\n    ).sort((first, second) => first.width - second.width).map((image) => `${image.src} ${image.width}w`).join(\", \");\n  }\n  if (layoutOptions.sizes) {\n    sizes = (layoutOptions.sizes.sizes || []).map(({ viewport, size }) => `${viewport} ${calculateSizesValue(size, layout, layoutOptions)}`).concat(calculateSizesValue(layoutOptions.sizes.size, layout, layoutOptions)).join(\", \");\n  } else if (srcSet) {\n    sizes = `${Math.ceil(layout.width / layoutOptions.containerWidth * 100)}vw`;\n  }\n  return { srcSet, sizes };\n}\nfunction PhotoRenderer(props) {\n  var _a, _b;\n  const {\n    photo,\n    layout,\n    layoutOptions,\n    imageProps: { style, className, ...restImageProps } = {},\n    renderPhoto\n  } = props;\n  const { onClick } = layoutOptions;\n  const imageStyle = {\n    display: \"block\",\n    boxSizing: \"content-box\",\n    width: cssPhotoWidth(layout, layoutOptions),\n    height: \"auto\",\n    aspectRatio: `${photo.width} / ${photo.height}`,\n    ...layoutOptions.padding ? { padding: `${layoutOptions.padding}px` } : null,\n    ...(layoutOptions.layout === \"columns\" || layoutOptions.layout === \"masonry\") && layout.photoIndex < layout.photosCount - 1 ? { marginBottom: `${layoutOptions.spacing}px` } : null,\n    ...onClick ? { cursor: \"pointer\" } : null,\n    ...style\n  };\n  const handleClick = onClick ? (event) => {\n    onClick({ event, photo, index: layout.index });\n  } : void 0;\n  const imageProps = {\n    src: photo.src,\n    alt: (_a = photo.alt) != null ? _a : \"\",\n    title: photo.title,\n    onClick: handleClick,\n    style: imageStyle,\n    className: clsx(\"react-photo-album--photo\", className),\n    loading: \"lazy\",\n    decoding: \"async\",\n    ...srcSetAndSizes(photo, layout, layoutOptions),\n    ...restImageProps\n  };\n  const renderDefaultPhoto = (options) => {\n    const { src, alt, srcSet, sizes, style: unwrappedStyle, ...rest } = imageProps;\n    return React.createElement(\n      \"img\",\n      {\n        alt,\n        ...srcSet ? { srcSet, sizes } : null,\n        src,\n        style: (options == null ? void 0 : options.wrapped) ? { display: \"block\", width: \"100%\", height: \"100%\" } : unwrappedStyle,\n        ...rest\n      }\n    );\n  };\n  const wrapperStyle = (({ display, boxSizing, width, aspectRatio, padding, marginBottom, cursor }) => ({\n    display,\n    boxSizing,\n    width,\n    aspectRatio,\n    padding,\n    marginBottom,\n    cursor\n  }))(imageStyle);\n  return React.createElement(React.Fragment, null, (_b = renderPhoto == null ? void 0 : renderPhoto({\n    photo,\n    layout,\n    layoutOptions,\n    imageProps,\n    renderDefaultPhoto,\n    wrapperStyle\n  })) != null ? _b : renderDefaultPhoto());\n}\nfunction defaultRenderRowContainer({\n  rowContainerProps,\n  children\n}) {\n  return React.createElement(\"div\", { ...rowContainerProps }, children);\n}\nfunction RowContainerRenderer(props) {\n  const {\n    layoutOptions,\n    rowIndex,\n    rowsCount,\n    renderRowContainer,\n    rowContainerProps: { style, className, ...restRowContainerProps } = {},\n    children\n  } = props;\n  const rowContainerProps = {\n    className: clsx(\"react-photo-album--row\", className),\n    style: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      flexWrap: \"nowrap\",\n      alignItems: \"flex-start\",\n      justifyContent: \"space-between\",\n      ...rowIndex < rowsCount - 1 ? { marginBottom: `${layoutOptions.spacing}px` } : null,\n      ...style\n    },\n    ...restRowContainerProps\n  };\n  return React.createElement(React.Fragment, null, (renderRowContainer != null ? renderRowContainer : defaultRenderRowContainer)({\n    layoutOptions,\n    rowIndex,\n    rowsCount,\n    rowContainerProps,\n    children\n  }));\n}\nfunction RowsLayout(props) {\n  const {\n    photos,\n    layoutOptions,\n    renderPhoto,\n    renderRowContainer,\n    componentsProps: { imageProps, rowContainerProps }\n  } = props;\n  const rowsLayout = computeRowsLayout({ photos, layoutOptions });\n  if (!rowsLayout)\n    return null;\n  return React.createElement(React.Fragment, null, rowsLayout.map((row, rowIndex) => React.createElement(\n    RowContainerRenderer,\n    {\n      key: `row-${rowIndex}`,\n      layoutOptions,\n      rowIndex,\n      rowsCount: rowsLayout.length,\n      renderRowContainer,\n      rowContainerProps\n    },\n    row.map(({ photo, layout }) => React.createElement(\n      PhotoRenderer,\n      {\n        key: photo.key || photo.src,\n        photo,\n        layout,\n        layoutOptions,\n        renderPhoto,\n        imageProps\n      }\n    ))\n  )));\n}\nfunction computeShortestPath(graph, pathLength, startNode, endNode) {\n  const matrix = /* @__PURE__ */ new Map();\n  const queue = /* @__PURE__ */ new Set();\n  queue.add(startNode);\n  for (let length = 0; length < pathLength; length += 1) {\n    const currentQueue = [...queue.keys()];\n    queue.clear();\n    currentQueue.forEach((node) => {\n      const accumulatedWeight = length > 0 ? matrix.get(node)[length].weight : 0;\n      graph(node).forEach(({ neighbor, weight }) => {\n        let paths = matrix.get(neighbor);\n        if (!paths) {\n          paths = [];\n          matrix.set(neighbor, paths);\n        }\n        const newWeight = accumulatedWeight + weight;\n        const nextPath = paths[length + 1];\n        if (!nextPath || nextPath.weight > newWeight && (nextPath.weight / newWeight > 1.0001 || node < nextPath.node)) {\n          paths[length + 1] = { node, weight: newWeight };\n        }\n        if (length < pathLength - 1 && neighbor !== endNode) {\n          queue.add(neighbor);\n        }\n      });\n    });\n  }\n  return matrix;\n}\nfunction reconstructShortestPath(matrix, pathLength, endNode) {\n  const path = [endNode];\n  for (let node = endNode, length = pathLength; length > 0; length -= 1) {\n    node = matrix.get(node)[length].node;\n    path.push(node);\n  }\n  return path.reverse();\n}\nfunction findShortestPathLengthN(graph, pathLength, startNode, endNode) {\n  return reconstructShortestPath(computeShortestPath(graph, pathLength, startNode, endNode), pathLength, endNode);\n}\nfunction makeGetColumnNeighbors({\n  photos,\n  spacing,\n  padding,\n  targetColumnWidth,\n  targetColumnHeight\n}) {\n  return (node) => {\n    const results = [];\n    const cutOffHeight = targetColumnHeight * 1.5;\n    let height = targetColumnWidth / ratio(photos[node]) + 2 * padding;\n    for (let i = node + 1; i < photos.length + 1; i += 1) {\n      results.push({ neighbor: i, weight: (targetColumnHeight - height) ** 2 });\n      if (height > cutOffHeight || i === photos.length) {\n        break;\n      }\n      height += targetColumnWidth / ratio(photos[i]) + spacing + 2 * padding;\n    }\n    return results;\n  };\n}\nfunction buildColumnsModel({\n  path,\n  photos,\n  containerWidth,\n  columnsGaps,\n  columnsRatios,\n  spacing,\n  padding\n}) {\n  const columnsModel = [];\n  const totalRatio = columnsRatios.reduce((total, columnRatio) => total + columnRatio, 0);\n  for (let i = 0; i < path.length - 1; i += 1) {\n    const column = photos.map((photo, index) => ({ photo, index })).slice(path[i], path[i + 1]);\n    const totalAdjustedGaps = columnsRatios.reduce(\n      (total, columnRatio, index) => total + (columnsGaps[i] - columnsGaps[index]) * columnRatio,\n      0\n    );\n    const columnWidth = (containerWidth - (path.length - 2) * spacing - 2 * (path.length - 1) * padding - totalAdjustedGaps) * columnsRatios[i] / totalRatio;\n    columnsModel.push(\n      column.map(({ photo, index }, photoIndex) => ({\n        photo,\n        layout: {\n          width: columnWidth,\n          height: columnWidth / ratio(photo),\n          index,\n          photoIndex,\n          photosCount: column.length\n        }\n      }))\n    );\n  }\n  return columnsModel;\n}\nfunction computeColumnsModel({\n  photos,\n  layoutOptions,\n  targetColumnWidth\n}) {\n  const { columns, spacing, padding, containerWidth } = layoutOptions;\n  const columnsGaps = [];\n  const columnsRatios = [];\n  if (photos.length <= columns) {\n    const averageRatio = photos.length > 0 ? photos.reduce((acc, photo) => acc + ratio(photo), 0) / photos.length : 1;\n    for (let i = 0; i < columns; i += 1) {\n      columnsGaps[i] = 2 * padding;\n      columnsRatios[i] = i < photos.length ? ratio(photos[i]) : averageRatio;\n    }\n    const columnsModel2 = buildColumnsModel({\n      path: Array.from({ length: columns + 1 }).map((_, index) => Math.min(index, photos.length)),\n      photos,\n      columnsRatios,\n      columnsGaps,\n      containerWidth,\n      spacing,\n      padding\n    });\n    return { columnsGaps, columnsRatios, columnsModel: columnsModel2 };\n  }\n  const targetColumnHeight = (photos.reduce((acc, photo) => acc + targetColumnWidth / ratio(photo), 0) + spacing * (photos.length - columns) + 2 * padding * photos.length) / columns;\n  const getNeighbors = makeGetColumnNeighbors({\n    photos,\n    targetColumnWidth,\n    targetColumnHeight,\n    spacing,\n    padding\n  });\n  const path = findShortestPathLengthN(getNeighbors, columns, 0, photos.length);\n  for (let i = 0; i < path.length - 1; i += 1) {\n    const column = photos.slice(path[i], path[i + 1]);\n    columnsGaps[i] = spacing * (column.length - 1) + 2 * padding * column.length;\n    columnsRatios[i] = 1 / column.reduce((acc, photo) => acc + 1 / ratio(photo), 0);\n  }\n  const columnsModel = buildColumnsModel({\n    path,\n    photos,\n    columnsRatios,\n    columnsGaps,\n    containerWidth,\n    spacing,\n    padding\n  });\n  return { columnsGaps, columnsRatios, columnsModel };\n}\nfunction computeLayout(props) {\n  const { photos, layoutOptions } = props;\n  const { columns, spacing, padding, containerWidth } = layoutOptions;\n  const targetColumnWidth = (containerWidth - spacing * (columns - 1) - 2 * padding * columns) / columns;\n  const { columnsGaps, columnsRatios, columnsModel } = computeColumnsModel({\n    photos,\n    layoutOptions,\n    targetColumnWidth\n  });\n  if (columnsModel.findIndex(\n    (columnModel) => columnModel.findIndex(({ layout: { width, height } }) => width < 0 || height < 0) >= 0\n  ) >= 0) {\n    if (columns > 1) {\n      return computeLayout({ photos, layoutOptions: { ...layoutOptions, columns: columns - 1 } });\n    }\n    return void 0;\n  }\n  return { columnsModel, columnsGaps, columnsRatios };\n}\nfunction computeColumnsLayout({\n  photos,\n  layoutOptions\n}) {\n  return computeLayout({ photos, layoutOptions });\n}\nfunction defaultRenderColumnContainer({\n  columnContainerProps,\n  children\n}) {\n  return React.createElement(\"div\", { ...columnContainerProps }, children);\n}\nfunction cssColumnWidth(props) {\n  const { layoutOptions, columnIndex, columnsCount, columnsGaps, columnsRatios } = props;\n  const { layout, spacing, padding } = layoutOptions;\n  if (layout === \"masonry\" || !columnsGaps || !columnsRatios) {\n    return `calc((100% - ${spacing * (columnsCount - 1)}px) / ${columnsCount})`;\n  }\n  const totalRatio = columnsRatios.reduce((acc, ratio2) => acc + ratio2, 0);\n  const totalAdjustedGaps = columnsRatios.reduce(\n    (acc, ratio2, index) => acc + (columnsGaps[columnIndex] - columnsGaps[index]) * ratio2,\n    0\n  );\n  return `calc((100% - ${round(\n    (columnsCount - 1) * spacing + 2 * columnsCount * padding + totalAdjustedGaps,\n    3\n  )}px) * ${round(columnsRatios[columnIndex] / totalRatio, 5)} + ${2 * padding}px)`;\n}\nfunction ColumnContainerRenderer(props) {\n  const {\n    layoutOptions,\n    renderColumnContainer,\n    children,\n    columnContainerProps: { style, className, ...restColumnContainerProps } = {},\n    ...rest\n  } = props;\n  const columnContainerProps = {\n    className: clsx(\"react-photo-album--column\", className),\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      flexWrap: \"nowrap\",\n      alignItems: \"flex-start\",\n      width: cssColumnWidth(props),\n      justifyContent: layoutOptions.layout === \"columns\" ? \"space-between\" : \"flex-start\",\n      ...style\n    },\n    ...restColumnContainerProps\n  };\n  return React.createElement(React.Fragment, null, (renderColumnContainer != null ? renderColumnContainer : defaultRenderColumnContainer)({\n    layoutOptions,\n    columnContainerProps,\n    children,\n    ...rest\n  }));\n}\nfunction ColumnsLayout(props) {\n  const {\n    photos,\n    layoutOptions,\n    renderPhoto,\n    renderColumnContainer,\n    componentsProps: { imageProps, columnContainerProps }\n  } = props;\n  const columnsLayout = computeColumnsLayout({ photos, layoutOptions });\n  if (!columnsLayout)\n    return null;\n  const { columnsModel, columnsRatios, columnsGaps } = columnsLayout;\n  return React.createElement(React.Fragment, null, columnsModel.map((column, columnIndex) => React.createElement(\n    ColumnContainerRenderer,\n    {\n      key: `column-${columnIndex}`,\n      layoutOptions,\n      columnIndex,\n      columnsCount: columnsModel.length,\n      columnsGaps,\n      columnsRatios,\n      renderColumnContainer,\n      columnContainerProps\n    },\n    column.map(({ photo, layout }) => React.createElement(\n      PhotoRenderer,\n      {\n        key: photo.key || photo.src,\n        photo,\n        layout,\n        layoutOptions,\n        renderPhoto,\n        imageProps\n      }\n    ))\n  )));\n}\nfunction computeMasonryLayout(props) {\n  const { photos, layoutOptions } = props;\n  const { columns, spacing, padding, containerWidth } = layoutOptions;\n  const columnWidth = (containerWidth - spacing * (columns - 1) - 2 * padding * columns) / columns;\n  if (columnWidth <= 0) {\n    return columns > 1 ? computeMasonryLayout({\n      ...props,\n      layoutOptions: { ...layoutOptions, columns: columns - 1 }\n    }) : void 0;\n  }\n  const columnsCurrentTopPositions = [];\n  for (let i = 0; i < columns; i += 1) {\n    columnsCurrentTopPositions[i] = 0;\n  }\n  const columnsModel = photos.reduce(\n    (model, photo, index) => {\n      const shortestColumn = columnsCurrentTopPositions.reduce(\n        (currentShortestColumn, item, i) => item < columnsCurrentTopPositions[currentShortestColumn] - 1 ? i : currentShortestColumn,\n        0\n      );\n      columnsCurrentTopPositions[shortestColumn] = columnsCurrentTopPositions[shortestColumn] + columnWidth / ratio(photo) + spacing + 2 * padding;\n      model[shortestColumn].push({ photo, index });\n      return model;\n    },\n    Array.from({ length: columns }).map(() => [])\n  );\n  return columnsModel.map(\n    (column) => column.map(({ photo, index }, photoIndex) => ({\n      photo,\n      layout: {\n        width: columnWidth,\n        height: columnWidth / ratio(photo),\n        index,\n        photoIndex,\n        photosCount: column.length\n      }\n    }))\n  );\n}\nfunction MasonryLayout(props) {\n  const {\n    photos,\n    layoutOptions,\n    renderPhoto,\n    renderColumnContainer,\n    componentsProps: { imageProps, columnContainerProps }\n  } = props;\n  const masonryLayout = computeMasonryLayout({ photos, layoutOptions });\n  if (!masonryLayout)\n    return null;\n  return React.createElement(React.Fragment, null, masonryLayout.map((column, columnIndex) => React.createElement(\n    ColumnContainerRenderer,\n    {\n      key: `masonry-column-${columnIndex}`,\n      layoutOptions,\n      columnsCount: masonryLayout.length,\n      columnIndex,\n      renderColumnContainer,\n      columnContainerProps\n    },\n    column.map(({ photo, layout }) => React.createElement(\n      PhotoRenderer,\n      {\n        key: photo.key || photo.src,\n        photo,\n        layout,\n        layoutOptions,\n        renderPhoto,\n        imageProps\n      }\n    ))\n  )));\n}\nfunction defaultRenderContainer({ containerProps, children, containerRef }) {\n  return React.createElement(\"div\", { ref: containerRef, ...containerProps }, children);\n}\nfunction ContainerRenderer(props) {\n  const {\n    layout,\n    renderContainer,\n    children,\n    containerRef,\n    containerProps: { style, className, ...restContainerProps } = {}\n  } = props;\n  const containerProps = {\n    className: clsx(\"react-photo-album\", `react-photo-album--${layout}`, className),\n    style: {\n      display: \"flex\",\n      flexWrap: \"nowrap\",\n      justifyContent: \"space-between\",\n      flexDirection: layout === \"rows\" ? \"column\" : \"row\",\n      ...style\n    },\n    ...restContainerProps\n  };\n  return React.createElement(React.Fragment, null, (renderContainer != null ? renderContainer : defaultRenderContainer)({\n    containerProps,\n    containerRef,\n    layout,\n    children\n  }));\n}\nfunction useArray(array) {\n  const ref = React.useRef(array);\n  if (!array || !ref.current || array.join() !== ref.current.join()) {\n    ref.current = array;\n  }\n  return ref.current;\n}\nfunction containerWidthReducer(state, { newContainerWidth, newScrollbarWidth }) {\n  const { containerWidth, scrollbarWidth } = state;\n  if (containerWidth !== void 0 && scrollbarWidth !== void 0 && newContainerWidth !== void 0 && newScrollbarWidth !== void 0 && newContainerWidth > containerWidth && newContainerWidth - containerWidth <= 20 && newScrollbarWidth < scrollbarWidth) {\n    return { containerWidth, scrollbarWidth: newScrollbarWidth };\n  }\n  return containerWidth !== newContainerWidth || scrollbarWidth !== newScrollbarWidth ? { containerWidth: newContainerWidth, scrollbarWidth: newScrollbarWidth } : state;\n}\nfunction resolveContainerWidth(el, breakpoints2) {\n  let width = el == null ? void 0 : el.clientWidth;\n  if (width !== void 0 && breakpoints2 && breakpoints2.length > 0) {\n    const sorted = [...breakpoints2.filter((x) => x > 0)].sort((a, b) => b - a);\n    sorted.push(Math.floor(sorted[sorted.length - 1] / 2));\n    const threshold = width;\n    width = sorted.find((breakpoint, index) => breakpoint <= threshold || index === sorted.length - 1);\n  }\n  return width;\n}\nfunction useContainerWidth(breakpoints2, defaultContainerWidth) {\n  const [{ containerWidth }, dispatch] = React.useReducer(containerWidthReducer, {\n    containerWidth: defaultContainerWidth\n  });\n  const ref = React.useRef(null);\n  const observerRef = React.useRef();\n  const containerRef = React.useCallback(\n    (node) => {\n      var _a;\n      (_a = observerRef.current) == null ? void 0 : _a.disconnect();\n      observerRef.current = void 0;\n      ref.current = node;\n      const updateWidth = () => dispatch({\n        newContainerWidth: resolveContainerWidth(ref.current, breakpoints2),\n        newScrollbarWidth: window.innerWidth - document.documentElement.clientWidth\n      });\n      updateWidth();\n      if (node && typeof ResizeObserver !== \"undefined\") {\n        observerRef.current = new ResizeObserver(updateWidth);\n        observerRef.current.observe(node);\n      }\n    },\n    [breakpoints2]\n  );\n  return { containerRef, containerWidth };\n}\nconst breakpoints = Object.freeze([1200, 600, 300, 0]);\nfunction unwrap(value, arg) {\n  return typeof value === \"function\" ? value(arg) : value;\n}\nfunction unwrapParameter(value, containerWidth) {\n  return typeof value !== \"undefined\" ? unwrap(value, containerWidth) : void 0;\n}\nfunction selectResponsiveValue(values, containerWidth) {\n  const index = breakpoints.findIndex((breakpoint) => breakpoint <= containerWidth);\n  return unwrap(values[index >= 0 ? index : 0], containerWidth);\n}\nfunction resolveResponsiveParameter(parameter, containerWidth, values, minValue = 0) {\n  const value = unwrapParameter(parameter, containerWidth);\n  return Math.round(Math.max(value === void 0 ? selectResponsiveValue(values, containerWidth) : value, minValue));\n}\nfunction resolveLayoutOptions({\n  layout,\n  onClick,\n  containerWidth,\n  targetRowHeight,\n  rowConstraints,\n  columns,\n  spacing,\n  padding,\n  sizes\n}) {\n  return {\n    layout,\n    onClick,\n    containerWidth,\n    columns: resolveResponsiveParameter(columns, containerWidth, [5, 4, 3, 2], 1),\n    spacing: resolveResponsiveParameter(spacing, containerWidth, [20, 15, 10, 5]),\n    padding: resolveResponsiveParameter(padding, containerWidth, [0, 0, 0, 0, 0]),\n    targetRowHeight: resolveResponsiveParameter(targetRowHeight, containerWidth, [\n      (w) => w / 5,\n      (w) => w / 4,\n      (w) => w / 3,\n      (w) => w / 2\n    ]),\n    rowConstraints: unwrapParameter(rowConstraints, containerWidth),\n    sizes\n  };\n}\nfunction resolveComponentsProps(props, containerWidth, layoutOptions) {\n  const { photos, componentsProps: componentsPropsProp } = props;\n  const componentsProps = unwrap(componentsPropsProp, containerWidth) || {};\n  if (layoutOptions) {\n    const { layout, spacing, padding, rowConstraints } = layoutOptions;\n    if (layout === \"rows\") {\n      const { singleRowMaxHeight } = rowConstraints || {};\n      if (singleRowMaxHeight) {\n        const maxWidth = Math.floor(\n          photos.reduce(\n            (acc, { width, height }) => acc + width / height * singleRowMaxHeight - 2 * padding,\n            padding * photos.length * 2 + spacing * (photos.length - 1)\n          )\n        );\n        if (maxWidth > 0) {\n          componentsProps.containerProps = componentsProps.containerProps || {};\n          componentsProps.containerProps.style = { maxWidth, ...componentsProps.containerProps.style };\n        }\n      }\n    }\n  }\n  return componentsProps;\n}\nfunction renderLayout(props, componentsProps, layoutOptions) {\n  const { photos, layout, renderPhoto, renderRowContainer, renderColumnContainer } = props;\n  const commonLayoutProps = { photos, renderPhoto, componentsProps };\n  if (layout === \"rows\") {\n    return React.createElement(\n      RowsLayout,\n      {\n        layoutOptions,\n        renderRowContainer,\n        ...commonLayoutProps\n      }\n    );\n  }\n  if (layout === \"columns\") {\n    return React.createElement(\n      ColumnsLayout,\n      {\n        layoutOptions,\n        renderColumnContainer,\n        ...commonLayoutProps\n      }\n    );\n  }\n  return React.createElement(\n    MasonryLayout,\n    {\n      layoutOptions,\n      renderColumnContainer,\n      ...commonLayoutProps\n    }\n  );\n}\nfunction PhotoAlbum(props) {\n  const { photos, layout, renderContainer, defaultContainerWidth, breakpoints: breakpoints2 } = props;\n  const { containerRef, containerWidth } = useContainerWidth(useArray(breakpoints2), defaultContainerWidth);\n  if (!layout || ![\"rows\", \"columns\", \"masonry\"].includes(layout) || !Array.isArray(photos))\n    return null;\n  const layoutOptions = containerWidth ? resolveLayoutOptions({ containerWidth, ...props }) : void 0;\n  const componentsProps = resolveComponentsProps(props, containerWidth, layoutOptions);\n  return React.createElement(\n    ContainerRenderer,\n    {\n      layout,\n      containerRef,\n      renderContainer,\n      containerProps: componentsProps.containerProps\n    },\n    layoutOptions && renderLayout(props, componentsProps, layoutOptions)\n  );\n}\nexport {\n  PhotoAlbum,\n  PhotoAlbum as default\n};\n"]},"metadata":{},"sourceType":"module"}